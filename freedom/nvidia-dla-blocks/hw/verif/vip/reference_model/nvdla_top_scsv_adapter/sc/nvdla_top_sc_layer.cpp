// ================================================================
// NVDLA Open Source Project
// 
// Copyright(c) 2016 - 2017 NVIDIA Corporation.  Licensed under the
// NVDLA Open Hardware License; Check "LICENSE" which comes with 
// this distribution for more information.
// ================================================================

// nvdla_top sc side SC-SV Adapter 
// This is autogenerated code

#include "nvdla_top_sc_layer.h"

//Constructor
nvdla_top_sc_layer::nvdla_top_sc_layer(sc_module_name name): sc_module(name)
  ,nvdla_top_sc2sv_nvdla_core2dbb_axi4_target_pt("nvdla_top_sc2sv_nvdla_core2dbb_axi4_target_pt")
  ,nvdla_top_sc2sv_nvdla_core2cvsram_axi4_target_pt("nvdla_top_sc2sv_nvdla_core2cvsram_axi4_target_pt")
  ,nvdla_top_sv2sc_nvdla_host_master_if_initiator_pt("nvdla_top_sv2sc_nvdla_host_master_if_initiator_pt")
  ,nvdla_top_sc2sv_dma_monitor_mc_target_pt("nvdla_top_sc2sv_dma_monitor_mc_target_pt")
  ,nvdla_top_sc2sv_dma_monitor_cv_target_pt("nvdla_top_sc2sv_dma_monitor_cv_target_pt")
  ,nvdla_top_sc2sv_convolution_core_monitor_initiator_target_pt("nvdla_top_sc2sv_convolution_core_monitor_initiator_target_pt")
  ,nvdla_top_sc2sv_post_processing_monitor_initiator_target_pt("nvdla_top_sc2sv_post_processing_monitor_initiator_target_pt")
  ,nvdla_top_sv2sc_dma_monitor_mc_credit_initiator_pt("nvdla_top_sv2sc_dma_monitor_mc_credit_initiator_pt")
  ,nvdla_top_sv2sc_dma_monitor_cv_credit_initiator_pt("nvdla_top_sv2sc_dma_monitor_cv_credit_initiator_pt")
  ,nvdla_top_sv2sc_convolution_core_monitor_credit_initiator_pt("nvdla_top_sv2sc_convolution_core_monitor_credit_initiator_pt")
  ,nvdla_top_sv2sc_post_processing_monitor_credit_initiator_pt("nvdla_top_sv2sc_post_processing_monitor_credit_initiator_pt")    
  ,nvdla_top_sc2sv_nvdla_intr("nvdla_top_sc2sv_nvdla_intr")
{
  //////////////////////////////////////////////////////////////////////
  //nvdla_top proxy and passthrough construction & connections
  //////////////////////////////////////////////////////////////////////

  nvdla_top_sc2sv_nvdla_core2dbb_axi4 = new nvdla_scsv_sc_tlm_channel<32,tlm_base_protocol_types>("nvdla_top_sc2sv_nvdla_core2dbb_axi4"); 
  nvdla_top_sc2sv_nvdla_core2dbb_axi4_target_pt.bind(nvdla_top_sc2sv_nvdla_core2dbb_axi4->sc_tlm_target);
  uvmc_connect<nvdla_scsv_converter,32,tlm_base_protocol_types>(nvdla_top_sc2sv_nvdla_core2dbb_axi4->sc_tlm_initiator,"nvdla_top_sc2sv_nvdla_core2dbb_axi4");

  nvdla_top_sc2sv_nvdla_core2cvsram_axi4 = new nvdla_scsv_sc_tlm_channel<32,tlm_base_protocol_types>("nvdla_top_sc2sv_nvdla_core2cvsram_axi4"); 
  nvdla_top_sc2sv_nvdla_core2cvsram_axi4_target_pt.bind(nvdla_top_sc2sv_nvdla_core2cvsram_axi4->sc_tlm_target);
  uvmc_connect<nvdla_scsv_converter,32,tlm_base_protocol_types>(nvdla_top_sc2sv_nvdla_core2cvsram_axi4->sc_tlm_initiator,"nvdla_top_sc2sv_nvdla_core2cvsram_axi4");

  nvdla_top_sv2sc_nvdla_host_master_if = new nvdla_scsv_sc_tlm_channel<32,tlm_base_protocol_types>("nvdla_top_sv2sc_nvdla_host_master_if"); 
  nvdla_top_sv2sc_nvdla_host_master_if->sc_tlm_initiator.bind(nvdla_top_sv2sc_nvdla_host_master_if_initiator_pt);
  uvmc_connect<nvdla_scsv_converter,32,tlm_base_protocol_types>(nvdla_top_sv2sc_nvdla_host_master_if->sc_tlm_target,"nvdla_top_sv2sc_nvdla_host_master_if");   

  nvdla_top_sc2sv_dma_monitor_mc = new nvdla_scsv_sc_tlm_channel<32,tlm_base_protocol_types>("nvdla_top_sc2sv_dma_monitor_mc"); 
  nvdla_top_sc2sv_dma_monitor_mc_target_pt.bind(nvdla_top_sc2sv_dma_monitor_mc->sc_tlm_target);
  uvmc_connect<nvdla_scsv_converter,32,tlm_base_protocol_types>(nvdla_top_sc2sv_dma_monitor_mc->sc_tlm_initiator,"nvdla_top_sc2sv_dma_monitor_mc");

  nvdla_top_sc2sv_dma_monitor_cv = new nvdla_scsv_sc_tlm_channel<32,tlm_base_protocol_types>("nvdla_top_sc2sv_dma_monitor_cv"); 
  nvdla_top_sc2sv_dma_monitor_cv_target_pt.bind(nvdla_top_sc2sv_dma_monitor_cv->sc_tlm_target);
  uvmc_connect<nvdla_scsv_converter,32,tlm_base_protocol_types>(nvdla_top_sc2sv_dma_monitor_cv->sc_tlm_initiator,"nvdla_top_sc2sv_dma_monitor_cv");
            
  nvdla_top_sc2sv_convolution_core_monitor_initiator = new nvdla_scsv_sc_tlm_channel<32,tlm_base_protocol_types>("nvdla_top_sc2sv_convolution_core_monitor_initiator"); 
  nvdla_top_sc2sv_convolution_core_monitor_initiator_target_pt.bind(nvdla_top_sc2sv_convolution_core_monitor_initiator->sc_tlm_target);
  uvmc_connect<nvdla_scsv_converter,32,tlm_base_protocol_types>(nvdla_top_sc2sv_convolution_core_monitor_initiator->sc_tlm_initiator,"nvdla_top_sc2sv_convolution_core_monitor_initiator");

  nvdla_top_sc2sv_post_processing_monitor_initiator = new nvdla_scsv_sc_tlm_channel<32,tlm_base_protocol_types>("nvdla_top_sc2sv_post_processing_monitor_initiator"); 
  nvdla_top_sc2sv_post_processing_monitor_initiator_target_pt.bind(nvdla_top_sc2sv_post_processing_monitor_initiator->sc_tlm_target);
  uvmc_connect<nvdla_scsv_converter,32,tlm_base_protocol_types>(nvdla_top_sc2sv_post_processing_monitor_initiator->sc_tlm_initiator,"nvdla_top_sc2sv_post_processing_monitor_initiator");

  nvdla_top_sv2sc_dma_monitor_mc_credit = new nvdla_scsv_sc_tlm_channel<32,tlm_base_protocol_types>("nvdla_top_sv2sc_dma_monitor_mc_credit"); 
  nvdla_top_sv2sc_dma_monitor_mc_credit->sc_tlm_initiator.bind(nvdla_top_sv2sc_dma_monitor_mc_credit_initiator_pt);
  uvmc_connect<nvdla_scsv_converter,32,tlm_base_protocol_types>(nvdla_top_sv2sc_dma_monitor_mc_credit->sc_tlm_target,"nvdla_top_sv2sc_dma_monitor_mc_credit");   

  nvdla_top_sv2sc_dma_monitor_cv_credit = new nvdla_scsv_sc_tlm_channel<32,tlm_base_protocol_types>("nvdla_top_sv2sc_dma_monitor_cv_credit"); 
  nvdla_top_sv2sc_dma_monitor_cv_credit->sc_tlm_initiator.bind(nvdla_top_sv2sc_dma_monitor_cv_credit_initiator_pt);
  uvmc_connect<nvdla_scsv_converter,32,tlm_base_protocol_types>(nvdla_top_sv2sc_dma_monitor_cv_credit->sc_tlm_target,"nvdla_top_sv2sc_dma_monitor_cv_credit");   

  nvdla_top_sv2sc_convolution_core_monitor_credit = new nvdla_scsv_sc_tlm_channel<32,tlm_base_protocol_types>("nvdla_top_sv2sc_convolution_core_monitor_credit"); 
  nvdla_top_sv2sc_convolution_core_monitor_credit->sc_tlm_initiator.bind(nvdla_top_sv2sc_convolution_core_monitor_credit_initiator_pt);
  uvmc_connect<nvdla_scsv_converter,32,tlm_base_protocol_types>(nvdla_top_sv2sc_convolution_core_monitor_credit->sc_tlm_target,"nvdla_top_sv2sc_convolution_core_monitor_credit");   

  nvdla_top_sv2sc_post_processing_monitor_credit = new nvdla_scsv_sc_tlm_channel<32,tlm_base_protocol_types>("nvdla_top_sv2sc_post_processing_monitor_credit"); 
  nvdla_top_sv2sc_post_processing_monitor_credit->sc_tlm_initiator.bind(nvdla_top_sv2sc_post_processing_monitor_credit_initiator_pt);
  uvmc_connect<nvdla_scsv_converter,32,tlm_base_protocol_types>(nvdla_top_sv2sc_post_processing_monitor_credit->sc_tlm_target,"nvdla_top_sv2sc_post_processing_monitor_credit");    

  // Callbacks
#ifdef nvdla_top_CONSTRUCT_MACRO
  nvdla_top_CONSTRUCT_MACRO
#endif

#ifdef nvdla_top_REGISTER_MACRO
    nvdla_top_REGISTER_MACRO
#endif
};
