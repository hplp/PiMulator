source_ipfile "ttcl/atg_reg_func.xit"
set en_advanced [get_property "MODELPARAM_VALUE.C_ENABLE_ADVANCED" [current_scope]]
set en_profile [get_property "MODELPARAM_VALUE.C_ENABLE_PROFILE" [current_scope]]
set en_trace [get_property "MODELPARAM_VALUE.C_ENABLE_TRACE" [current_scope]]
set en_event_cnt [get_property "MODELPARAM_VALUE.C_ENABLE_EVENT_COUNT" [current_scope]]
set en_event_log [get_property "MODELPARAM_VALUE.C_ENABLE_EVENT_LOG" [current_scope]]
set slot0_protocol [get_property "MODELPARAM_VALUE.C_SLOT_0_AXI_PROTOCOL" [current_scope]]
set slot1_protocol [get_property "MODELPARAM_VALUE.C_SLOT_1_AXI_PROTOCOL" [current_scope]]
set slot2_protocol [get_property "MODELPARAM_VALUE.C_SLOT_2_AXI_PROTOCOL" [current_scope]]
set slot3_protocol [get_property "MODELPARAM_VALUE.C_SLOT_3_AXI_PROTOCOL" [current_scope]]
set slot4_protocol [get_property "MODELPARAM_VALUE.C_SLOT_4_AXI_PROTOCOL" [current_scope]]
set slot5_protocol [get_property "MODELPARAM_VALUE.C_SLOT_5_AXI_PROTOCOL" [current_scope]]
set slot6_protocol [get_property "MODELPARAM_VALUE.C_SLOT_6_AXI_PROTOCOL" [current_scope]]
set slot7_protocol [get_property "MODELPARAM_VALUE.C_SLOT_7_AXI_PROTOCOL" [current_scope]]
set num_of_slots   [get_property "MODELPARAM_VALUE.C_NUM_MONITOR_SLOTS" [current_scope]]
set num_counters   [get_property "MODELPARAM_VALUE.C_NUM_OF_COUNTERS" [current_scope]]
set slot0_width   [get_property "MODELPARAM_VALUE.C_SLOT_0_AXI_DATA_WIDTH" [current_scope]]
set slot1_width   [get_property "MODELPARAM_VALUE.C_SLOT_1_AXI_DATA_WIDTH" [current_scope]]
set slot2_width   [get_property "MODELPARAM_VALUE.C_SLOT_2_AXI_DATA_WIDTH" [current_scope]]
set slot3_width   [get_property "MODELPARAM_VALUE.C_SLOT_3_AXI_DATA_WIDTH" [current_scope]]
set slot4_width   [get_property "MODELPARAM_VALUE.C_SLOT_4_AXI_DATA_WIDTH" [current_scope]]
set slot5_width   [get_property "MODELPARAM_VALUE.C_SLOT_5_AXI_DATA_WIDTH" [current_scope]]
set slot6_width   [get_property "MODELPARAM_VALUE.C_SLOT_6_AXI_DATA_WIDTH" [current_scope]]
set slot7_width   [get_property "MODELPARAM_VALUE.C_SLOT_7_AXI_DATA_WIDTH" [current_scope]]

set slot0_axis_width   [get_property "MODELPARAM_VALUE.C_SLOT_0_AXIS_TDATA_WIDTH" [current_scope]]
set slot1_axis_width   [get_property "MODELPARAM_VALUE.C_SLOT_1_AXIS_TDATA_WIDTH" [current_scope]]
set slot2_axis_width   [get_property "MODELPARAM_VALUE.C_SLOT_2_AXIS_TDATA_WIDTH" [current_scope]]
set slot3_axis_width   [get_property "MODELPARAM_VALUE.C_SLOT_3_AXIS_TDATA_WIDTH" [current_scope]]
set slot4_axis_width   [get_property "MODELPARAM_VALUE.C_SLOT_4_AXIS_TDATA_WIDTH" [current_scope]]
set slot5_axis_width   [get_property "MODELPARAM_VALUE.C_SLOT_5_AXIS_TDATA_WIDTH" [current_scope]]
set slot6_axis_width   [get_property "MODELPARAM_VALUE.C_SLOT_6_AXIS_TDATA_WIDTH" [current_scope]]
set slot7_axis_width   [get_property "MODELPARAM_VALUE.C_SLOT_7_AXIS_TDATA_WIDTH" [current_scope]]

set metric_scale   [get_property "MODELPARAM_VALUE.C_METRIC_COUNT_SCALE" [current_scope]]

set one_shift [int2hex [expr {1/$metric_scale}]]
set two_shift [int2hex [expr {2/$metric_scale}]]
set four_shift [int2hex [expr {4/$metric_scale}]]
set six_shift [int2hex [expr {6/$metric_scale}]]
set eight_shift [int2hex [expr {8/$metric_scale}]] 
set twentyeight_shift [int2hex [expr {40/$metric_scale}]] 

## For 4 transactions 4*1/8 = 1/2
  if {($slot0_protocol == "AXI4LITE" || $slot1_protocol == "AXI4LITE" || $slot2_protocol == "AXI4LITE" || 
     $slot3_protocol == "AXI4LITE" || $slot4_protocol == "AXI4LITE" || $slot5_protocol == "AXI4LITE" ||
     $slot6_protocol == "AXI4LITE" || $slot7_protocol == "AXI4LITE" ) } {
  set trn_len 1 
  } else {
  set trn_len 4 
  }
set slot0_rd_byte [int2hex [expr {($trn_len*$slot0_width)/(8*$metric_scale)}]]
set slot1_rd_byte [int2hex [expr {($trn_len*$slot1_width)/(8*$metric_scale)}]]
set slot2_rd_byte [int2hex [expr {($trn_len*$slot2_width)/(8*$metric_scale)}]]
set slot3_rd_byte [int2hex [expr {($trn_len*$slot3_width)/(8*$metric_scale)}]]
set slot4_rd_byte [int2hex [expr {($trn_len*$slot4_width)/(8*$metric_scale)}]]
set slot5_rd_byte [int2hex [expr {($trn_len*$slot5_width)/(8*$metric_scale)}]]
set slot6_rd_byte [int2hex [expr {($trn_len*$slot6_width)/(8*$metric_scale)}]]
set slot7_rd_byte [int2hex [expr {($trn_len*$slot7_width)/(8*$metric_scale)}]]

## For 4 transactions 40*1/8 = 5 
set slot0_axis_byte [int2hex [expr {$slot0_axis_width*5/$metric_scale}]]
set slot1_axis_byte [int2hex [expr {$slot1_axis_width*5/$metric_scale}]]
set slot2_axis_byte [int2hex [expr {$slot2_axis_width*5/$metric_scale}]]
set slot3_axis_byte [int2hex [expr {$slot3_axis_width*5/$metric_scale}]]
set slot4_axis_byte [int2hex [expr {$slot4_axis_width*5/$metric_scale}]]
set slot5_axis_byte [int2hex [expr {$slot5_axis_width*5/$metric_scale}]]
set slot6_axis_byte [int2hex [expr {$slot6_axis_width*5/$metric_scale}]]
set slot7_axis_byte [int2hex [expr {$slot7_axis_width*5/$metric_scale}]]

#---------------------------------------------------------#
# Subroutines to  simplify write and read register access #
#---------------------------------------------------------#
proc fill_dummy_values_to_mif { cur_mif_index } {
  #Fill rest of the MIF entries with default values.
  dputs "mifindex: $cur_mif_index "
  for {set n $cur_mif_index} {$n < 256} {incr n} {
   [write_regl FFFFFFFF 0 0 0]
  } 
}
proc dputs { dbg_msg } {
 set debug "DEBUG-Internal:"
 set debug_level 0
 if { $debug_level == 1  } {
  puts "$debug: $dbg_msg"
 }
}
proc write_regl {addr data mask cerr} {
 variable addr_coe
 variable data_coe
 variable mask_coe
 variable ctrl_coe
 variable pidx 
 variable fidx 
 [write_reg $addr_coe $data_coe $mask_coe $ctrl_coe $addr $data $mask $pidx $fidx $cerr]
 incr pidx
 incr fidx
 return 0
}

proc read_regl {addr data mask cerr cmp_type} {
 variable addr_coe
 variable data_coe
 variable mask_coe
 variable ctrl_coe
 variable pidx 
 variable fidx 
 [read_reg $addr_coe $data_coe $mask_coe $ctrl_coe $addr $data $mask $pidx $fidx $cerr $cmp_type]
 incr pidx
 incr fidx
 return 0
}

#------------------------------------------------------------
# Start of coe file generation
#------------------------------------------------------------
set addr_coe [add_ipfile addr.coe]
set data_coe [add_ipfile data.coe]
set mask_coe [add_ipfile mask.coe]
set ctrl_coe [add_ipfile ctrl.coe]

[start_coe $addr_coe $data_coe $mask_coe $ctrl_coe]

# command pass index 
set pidx 1
# command fail index
set fidx 0 
# mismatch count as error
set cerr 1 
#APM configuration
#Reset Metric counters
[write_regl 300 00000002 FFFFFFFF $cerr]
[write_regl 300 00000000 FFFFFFFF $cerr]
# Metric selection registers write
# Advanced Memory map metrics
if { ($slot0_protocol == "AXI4" || $slot0_protocol == "AXI4LITE" || $slot0_protocol == "AXI3") && $en_advanced == 1} {
[write_regl 44 03020100 FFFFFFFF $cerr]
[write_regl 48 09060504 FFFFFFFF $cerr]
[write_regl 4C 00000B0A FFFFFFFF $cerr]
}
# Advanced streaming metrics
if {$slot0_protocol == "AXI4S" && $en_advanced == 1} {
[write_regl 44 13121110 FFFFFFFF $cerr]
}

if {$en_trace == 1 || $en_event_log == 1} {
#Enable Metric counters and event log and flag enables
[write_regl 300 00000101 FFFFFFFF $cerr]
[write_regl 400 00000002 FFFFFFFF $cerr]
} else {
[write_regl 300 00000001 FFFFFFFF $cerr]
}

# ATG Traffic generation for AXI4 Full transactions
if {                       ($slot0_protocol == "AXI4" || $slot0_protocol == "AXI4LITE" || $slot0_protocol == "AXI3" )  || 
     ($num_of_slots > 1 && ($slot1_protocol == "AXI4" || $slot1_protocol == "AXI4LITE" || $slot1_protocol == "AXI3" )) || 
     ($num_of_slots > 2 && ($slot2_protocol == "AXI4" || $slot2_protocol == "AXI4LITE" || $slot2_protocol == "AXI3" )) || 
     ($num_of_slots > 3 && ($slot3_protocol == "AXI4" || $slot3_protocol == "AXI4LITE" || $slot3_protocol == "AXI3" )) || 
     ($num_of_slots > 4 && ($slot4_protocol == "AXI4" || $slot4_protocol == "AXI4LITE" || $slot4_protocol == "AXI3" )) || 
     ($num_of_slots > 5 && ($slot5_protocol == "AXI4" || $slot5_protocol == "AXI4LITE" || $slot5_protocol == "AXI3" )) || 
     ($num_of_slots > 6 && ($slot6_protocol == "AXI4" || $slot6_protocol == "AXI4LITE" || $slot6_protocol == "AXI3" )) || 
     ($num_of_slots > 7 && ($slot7_protocol == "AXI4" || $slot7_protocol == "AXI4LITE" || $slot7_protocol == "AXI3" ))}  { 
 
  ##MODE:ADVANCED_BASIC:START
  #read revision register
  [read_regl 10000 20000000 FF000000 1 0 ]
  #write to cmdram-read  section
  set cmdr_r0 "12A00000"
  if {($slot0_protocol == "AXI4LITE" || $slot1_protocol == "AXI4LITE" || $slot2_protocol == "AXI4LITE" || 
     $slot3_protocol == "AXI4LITE" || $slot4_protocol == "AXI4LITE" || $slot5_protocol == "AXI4LITE" ||
     $slot6_protocol == "AXI4LITE" || $slot7_protocol == "AXI4LITE" ) } {
  set cmdr_r1 "80000000"
  } else {
  set cmdr_r1 "80002403"
  }
  set cmdr_r2 "00002400"
  set cmdr_r3 "00000000"
  [write_regl 18000 $cmdr_r0 FFFFFFFF $cerr]
  [write_regl 18004 $cmdr_r1 FFFFFFFF $cerr]
  [write_regl 18008 $cmdr_r2 FFFFFFFF $cerr]
  [write_regl 1800c $cmdr_r3 FFFFFFFF $cerr]
  #write to cmdram-write section
  set cmdw_w0 "12A00000" 
  if {($slot0_protocol == "AXI4LITE" || $slot1_protocol == "AXI4LITE" || $slot2_protocol == "AXI4LITE" || 
     $slot3_protocol == "AXI4LITE" || $slot4_protocol == "AXI4LITE" || $slot5_protocol == "AXI4LITE" ||
     $slot6_protocol == "AXI4LITE" || $slot7_protocol == "AXI4LITE" ) } { 
  set cmdw_w1 "80000000"
  } else {
  set cmdw_w1 "80002403"
  }
  set cmdw_w2 "00000000"
  set cmdw_w3 "00000000"
  [write_regl 19000 $cmdw_w0 FFFFFFFF $cerr]
  [write_regl 19004 $cmdw_w1 FFFFFFFF $cerr]
  [write_regl 19008 $cmdw_w2 FFFFFFFF $cerr]
  [write_regl 1900c $cmdw_w3 FFFFFFFF $cerr]
  #write to prmram-write section
  #Add if necessary
  #write to mstram
  for {set n 0} {$n < 128} {incr n} {
   set offset [expr {$n * 4}]
   set base 49152
   set hex_addr [int2hex [expr {$base + $offset}]]
   set hex_data [int2hex $n]
   [write_regl $hex_addr $hex_data FFFFFFFF $cerr]
  } 
  #Enable interrupts
  [write_regl 1000C 80000000 FFFFFFFF $cerr]
  #Enable core
  [write_regl 10000 00100000 FFFFFFFF $cerr]
  #wait for done
  [read_regl 10008 80000000 80000000 0 0 ]
  ##MODE:ADVANCED_BASIC:END
} 

if {$slot0_protocol == "AXI4S" || 
    $slot1_protocol == "AXI4S" || 
    $slot2_protocol == "AXI4S" || 
    $slot3_protocol == "AXI4S" || 
    $slot4_protocol == "AXI4S" || 
    $slot5_protocol == "AXI4S" || 
    $slot6_protocol == "AXI4S" || 
    $slot7_protocol == "AXI4S"} { 
  ##MODE:STREAMING_MO:START
  #read revision register
  [read_regl 20030 20000000 FF000000 $cerr 0 ]
  [write_regl 20034 00000000 FFFFFFFF $cerr]
  #Configure tcnt/tlen
  [write_regl 20038 00040009 FFFFFFFF $cerr]
  #Enable core
  [write_regl 20030 00000001 FFFFFFFF $cerr]
  #wait for done
  [read_regl 20030 00000002 00000002 0 0 ]
  #Read trn cnt
  [read_regl 2003c 00000004 FFFFFFFF $cerr 0 ]
  ##MODE:STREAMING_MO:END
}

if { ($slot0_protocol ==  "AXI4" || $slot0_protocol == "AXI4LITE"   || $slot0_protocol == "AXI3") && $en_advanced == 1 && $num_counters > 0 } {
   [read_regl 100 $one_shift FFFFFFFF $cerr 0 ]       
   }
# Read transaction count
if { ($slot0_protocol ==  "AXI4" || $slot0_protocol == "AXI4LITE"  || $slot0_protocol == "AXI3" ) && $en_advanced == 1 && $num_counters > 1 } {
   [read_regl 110 $one_shift FFFFFFFF $cerr 0 ]          
   }
if { ($slot0_protocol ==  "AXI4" || $slot0_protocol == "AXI4LITE"  || $slot0_protocol == "AXI3" ) && $en_advanced == 1 && $num_counters > 2 } {
   [read_regl 120 $slot0_rd_byte FFFFFFFF $cerr 0 ]      
   }
if { ($slot0_protocol ==  "AXI4" || $slot0_protocol == "AXI4LITE"  || $slot0_protocol == "AXI3" ) && $en_advanced == 1 && $num_counters > 3 } {
   [read_regl 130 $slot0_rd_byte FFFFFFFF $cerr 0 ]       
   }
if { ($slot0_protocol ==  "AXI4" || $slot0_protocol == "AXI4LITE"  || $slot0_protocol == "AXI3" ) && $en_advanced == 1 && $num_counters > 4 } {
   if { $slot0_protocol == "AXI4LITE" } {
    [read_regl 140 $one_shift FFFFFFFF $cerr 0 ]      
   } else {
    [read_regl 140 $four_shift FFFFFFFF $cerr 0 ]      
   }
   }
if { ($slot0_protocol ==  "AXI4" || $slot0_protocol == "AXI4LITE"  || $slot0_protocol == "AXI3" ) && $en_advanced == 1 && $num_counters > 5 } {
   if { $slot0_protocol == "AXI4LITE" } {
     [read_regl 150 0 FFFFFFFF $cerr 0 ]      
   } else {
    [read_regl 150 $six_shift FFFFFFFF $cerr 0 ]      
   }
 }
if { ($slot0_protocol ==  "AXI4" || $slot0_protocol == "AXI4LITE"  || $slot0_protocol == "AXI3" ) && $en_advanced == 1 && $num_counters > 6 } {
    if { $slot0_protocol == "AXI4LITE" } {
      [read_regl 160 0 FFFFFFFF $cerr 0 ]       
    } else {
     [read_regl 160 $eight_shift FFFFFFFF $cerr 0 ]       
    }
  }
if { ($slot0_protocol ==  "AXI4" || $slot0_protocol == "AXI4LITE"  || $slot0_protocol == "AXI3" ) && $en_advanced == 1 && $num_counters > 7 } {
       [read_regl 170 $one_shift FFFFFFFF $cerr 0 ]       
   }
if { ($slot0_protocol ==  "AXI4" || $slot0_protocol == "AXI4LITE"  || $slot0_protocol == "AXI3" ) && $en_advanced == 1 && $num_counters > 8 } {
    if { $slot0_protocol == "AXI4LITE" } {
       [read_regl 180 0 FFFFFFFF $cerr 0 ]       
    } else {
       [read_regl 180 $one_shift FFFFFFFF $cerr 0 ]       
    }
   }
if { ($slot0_protocol ==  "AXI4" || $slot0_protocol == "AXI4LITE"  || $slot0_protocol == "AXI3" ) && $en_advanced == 1 && $num_counters > 9 } {
    if { $slot0_protocol == "AXI4LITE" } {
       [read_regl 190 0 FFFFFFFF $cerr 0 ]       
    } else {
       [read_regl 190 $one_shift FFFFFFFF $cerr 0 ]       
    }
   }


if { $slot0_protocol == "AXI4S" && $en_advanced == 1 && $num_counters > 0 } {
   [read_regl 100 $twentyeight_shift FFFFFFFF $cerr 0 ]     
   }
if { $slot0_protocol == "AXI4S" && $en_advanced == 1 && $num_counters > 1 } {
   [read_regl 110 $four_shift FFFFFFFF $cerr 0 ]      
   }
if {  $slot0_protocol == "AXI4S" && $en_advanced == 1 && $num_counters > 2 } {
   [read_regl 120 $slot0_axis_byte FFFFFFFF $cerr 0 ]     
   }
if { $slot0_protocol == "AXI4S" && $en_advanced == 1 && $num_counters > 3 } {
   [read_regl 130 00000000 FFFFFFFF $cerr 0 ]       
   }

  
if {$en_profile == 1} {
      #slot0 metrics
      [read_regl 100 $slot0_rd_byte FFFFFFFF $cerr 0 ]   
      [read_regl 110 $one_shift FFFFFFFF $cerr 0 ]   
      [read_regl 120 $eight_shift FFFFFFFF $cerr 0 ]   
      [read_regl 130 $slot0_rd_byte FFFFFFFF $cerr 0 ]   
      [read_regl 140 $one_shift FFFFFFFF $cerr 0 ]   
      [read_regl 150 $six_shift FFFFFFFF $cerr 0 ]   
      #slot1 metrics
      if { $num_slots > 1} {
      [read_regl 160 $slot1_rd_byte FFFFFFFF $cerr 0 ]
      [read_regl 170 $one_shift FFFFFFFF $cerr 0 ]
      [read_regl 180 $eight_shift FFFFFFFF $cerr 0 ]
      [read_regl 190 $slot1_rd_byte FFFFFFFF $cerr 0 ]
      [read_regl 1A0 $one_shift FFFFFFFF $cerr 0 ]
      [read_regl 1B0 $six_shift FFFFFFFF $cerr 0 ]
      }
      if { $num_slots > 2} {
      #slot2 metrics
      [read_regl 500 $slot2_rd_byte FFFFFFFF $cerr 0 ]
      [read_regl 510 $one_shift FFFFFFFF $cerr 0 ]
      [read_regl 520 $eight_shift FFFFFFFF $cerr 0 ]
      [read_regl 530 $slot2_rd_byte FFFFFFFF $cerr 0 ]
      [read_regl 540 $one_shift FFFFFFFF $cerr 0 ]
      [read_regl 550 $six_shift FFFFFFFF $cerr 0 ]
      }
      #slot3 metrics
      if { $num_slots > 3} {
      [read_regl 560 $slot3_rd_byte FFFFFFFF $cerr 0 ]
      [read_regl 570 $one_shift FFFFFFFF $cerr 0 ]
      [read_regl 580 $eight_shift FFFFFFFF $cerr 0 ]
      [read_regl 590 $slot3_rd_byte FFFFFFFF $cerr 0 ]
      [read_regl 5A0 $one_shift FFFFFFFF $cerr 0 ]
      [read_regl 5B0 $six_shift FFFFFFFF $cerr 0 ]
      }
      if { $num_slots > 4} {
      #slot4 metrics
      [read_regl 700 $slot4_rd_byte FFFFFFFF $cerr 0 ]
      [read_regl 710 $one_shift FFFFFFFF $cerr 0 ]
      [read_regl 720 $eight_shift FFFFFFFF $cerr 0 ]
      [read_regl 730 $slot4_rd_byte FFFFFFFF $cerr 0 ]
      [read_regl 740 $one_shift FFFFFFFF $cerr 0 ]
      [read_regl 750 $six_shift FFFFFFFF $cerr 0 ]
      }
      if { $num_slots > 5} {
      #slot5 metrics
      [read_regl 760 $slot5_rd_byte FFFFFFFF $cerr 0 ]
      [read_regl 770 $one_shift FFFFFFFF $cerr 0 ]
      [read_regl 780 $eight_shift FFFFFFFF $cerr 0 ]
      [read_regl 790 $slot5_rd_byte FFFFFFFF $cerr 0 ]
      [read_regl 7A0 $one_shift FFFFFFFF $cerr 0 ]
      [read_regl 7B0 $six_shift FFFFFFFF $cerr 0 ]
      }
      if { $num_slots > 6} {
      #slot6 metrics
      [read_regl 900 $slot6_rd_byte FFFFFFFF $cerr 0 ]
      [read_regl 910 $one_shift FFFFFFFF $cerr 0 ]
      [read_regl 920 $eight_shift FFFFFFFF $cerr 0 ]
      [read_regl 930 $slot6_rd_byte FFFFFFFF $cerr 0 ]
      [read_regl 940 $one_shift FFFFFFFF $cerr 0 ]
      [read_regl 950 $six_shift FFFFFFFF $cerr 0 ]
      }
      if { $num_slots > 7} {
      #slot7 metrics
      [read_regl 960 $slot7_rd_byte FFFFFFFF $cerr 0 ]
      [read_regl 970 $one_shift FFFFFFFF $cerr 0 ]
      [read_regl 980 $eight_shift FFFFFFFF $cerr 0 ]
      [read_regl 990 $slot7_rd_byte FFFFFFFF $cerr 0 ]
      [read_regl 9A0 $one_shift FFFFFFFF $cerr 0 ]
      [read_regl 9B0 $six_shift FFFFFFFF $cerr 0 ]
      }
}
 set cur_mif_index $pidx
 [fill_dummy_values_to_mif $cur_mif_index ]

[end_coe $addr_coe $data_coe $mask_coe $ctrl_coe]

### END
