<: ;#Component and file information :>
<: set ComponentName [getComponentNameString] :>
<: setOutputDirectory "./" :>
<: setFileName $ComponentName :>
<: setFileExtension ".xdc" :>
<: set c_family [getStringValue "c_family"] :>
<: set enable_sync [getIntValue "C_AXI4LITE_CORE_CLK_ASYNC"] :>
<: set slot0_enable_sync_i [getIntValue "C_SLOT_0_FIFO_ENABLE"] :>
<: set slot1_enable_sync_i [getIntValue "C_SLOT_1_FIFO_ENABLE"] :>
<: set slot2_enable_sync_i [getIntValue "C_SLOT_2_FIFO_ENABLE"] :>
<: set slot3_enable_sync_i [getIntValue "C_SLOT_3_FIFO_ENABLE"] :>
<: set slot4_enable_sync_i [getIntValue "C_SLOT_4_FIFO_ENABLE"] :>
<: set slot5_enable_sync_i [getIntValue "C_SLOT_5_FIFO_ENABLE"] :>
<: set slot6_enable_sync_i [getIntValue "C_SLOT_6_FIFO_ENABLE"] :>
<: set slot7_enable_sync_i [getIntValue "C_SLOT_7_FIFO_ENABLE"] :>
<: set num_slots [getIntValue "C_NUM_MONITOR_SLOTS"] :>
<: set ext_events [getIntValue "ENABLE_EXT_EVENTS"] :>
<: set event0_sync_i [getIntValue "C_EXT_EVENT0_FIFO_ENABLE"] :>
<: set event1_sync_i [getIntValue "C_EXT_EVENT1_FIFO_ENABLE"] :>
<: set event2_sync_i [getIntValue "C_EXT_EVENT2_FIFO_ENABLE"] :>
<: set event3_sync_i [getIntValue "C_EXT_EVENT3_FIFO_ENABLE"] :>
<: set event4_sync_i [getIntValue "C_EXT_EVENT4_FIFO_ENABLE"] :>
<: set event5_sync_i [getIntValue "C_EXT_EVENT5_FIFO_ENABLE"] :>
<: set event6_sync_i [getIntValue "C_EXT_EVENT6_FIFO_ENABLE"] :>
<: set event7_sync_i [getIntValue "C_EXT_EVENT7_FIFO_ENABLE"] :>
<: set event_log   [getIntValue "C_ENABLE_EVENT_LOG"] :>
<: set enable_trace   [getIntValue "C_ENABLE_TRACE"] :>
<: set is_us_device 0 :>
<: set slot0_enable_sync [expr [expr ($slot0_enable_sync_i==1)] * [expr ($num_slots >0)] ]:>
<: set slot1_enable_sync [expr [expr ($slot1_enable_sync_i==1)] * [expr ($num_slots >1)] ]:>
<: set slot2_enable_sync [expr [expr ($slot2_enable_sync_i==1)] * [expr ($num_slots >2)] ]:>
<: set slot3_enable_sync [expr [expr ($slot3_enable_sync_i==1)] * [expr ($num_slots >3)] ]:>
<: set slot4_enable_sync [expr [expr ($slot4_enable_sync_i==1)] * [expr ($num_slots >4)] ]:>
<: set slot5_enable_sync [expr [expr ($slot5_enable_sync_i==1)] * [expr ($num_slots >5)] ]:>
<: set slot6_enable_sync [expr [expr ($slot6_enable_sync_i==1)] * [expr ($num_slots >6)] ]:>
<: set slot7_enable_sync [expr [expr ($slot7_enable_sync_i==1)] * [expr ($num_slots >7)] ]:>
<: set event0_sync [expr [expr ($event0_sync_i==1)] * [expr ($num_slots >0)] ]:>
<: set event1_sync [expr [expr ($event1_sync_i==1)] * [expr ($num_slots >1)] ]:>
<: set event2_sync [expr [expr ($event2_sync_i==1)] * [expr ($num_slots >2)] ]:>
<: set event3_sync [expr [expr ($event3_sync_i==1)] * [expr ($num_slots >3)] ]:>
<: set event4_sync [expr [expr ($event4_sync_i==1)] * [expr ($num_slots >4)] ]:>
<: set event5_sync [expr [expr ($event5_sync_i==1)] * [expr ($num_slots >5)] ]:>
<: set event6_sync [expr [expr ($event6_sync_i==1)] * [expr ($num_slots >6)] ]:>
<: set event7_sync [expr [expr ($event7_sync_i==1)] * [expr ($num_slots >7)] ]:>
# file: <=: ComponentName :>.xdc
# (c) Copyright 2009 - 2011 Xilinx, Inc. All rights reserved.
# 
# This file contains confidential and proprietary information
# of Xilinx, Inc. and is protected under U.S. and
# international copyright and other intellectual property
# laws.
# 
# DISCLAIMER
# This disclaimer is not a license and does not grant any
# rights to the materials distributed herewith. Except as
# otherwise provided in a valid license issued to you by
# Xilinx, and to the maximum extent permitted by applicable
# law: (1) THESE MATERIALS ARE MADE AVAILABLE "AS IS" AND
# WITH ALL FAULTS, AND XILINX HEREBY DISCLAIMS ALL WARRANTIES
# AND CONDITIONS, EXPRESS, IMPLIED, OR STATUTORY, INCLUDING
# BUT NOT LIMITED TO WARRANTIES OF MERCHANTABILITY, NON-
# INFRINGEMENT, OR FITNESS FOR ANY PARTICULAR PURPOSE; and
# (2) Xilinx shall not be liable (whether in contract or tort,
# including negligence, or under any other theory of
# liability) for any loss or damage of any kind or nature
# related to, arising under or in connection with these
# materials, including for any direct, or any indirect,
# special, incidental, or consequential loss or damage
# (including loss of data, profits, goodwill, or any type of
# loss or damage suffered as a result of any action brought
# by a third party) even if such damage or loss was
# reasonably foreseeable or Xilinx had been advised of the
# possibility of the same.
# 
# CRITICAL APPLICATIONS
# Xilinx products are not designed or intended to be fail-
# safe, or for use in any application requiring fail-safe
# performance, such as life-support or safety devices or
# systems, Class III medical devices, nuclear facilities,
# applications related to the deployment of airbags, or any
# other applications that could lead to death, personal
# injury, or severe property or environmental damage
# (individually and collectively, "Critical
# Applications"). Customer assumes the sole risk and
# liability of any use of Xilinx products in Critical
# Applications, subject only to applicable laws and
# regulations governing limitations on product liability.
# 
# THIS COPYRIGHT NOTICE AND DISCLAIMER MUST BE RETAINED AS
# PART OF THIS FILE AT ALL TIMES.

<: if {($enable_sync == 1)} { :>
  set_false_path -to [get_pins -hier *cdc_to*/D]
<: } :>


<: if { ($slot0_enable_sync == 1) || ($slot1_enable_sync == 1) || ($slot2_enable_sync ==1) || ($slot3_enable_sync == 1) || ($slot4_enable_sync == 1) || ($slot5_enable_sync ==1) || ($slot6_enable_sync == 1) || ($slot7_enable_sync == 1) || (($ext_events == 1) && (($event0_sync == 1) || ($event1_sync == 1) ||($event2_sync == 1) || ($event3_sync == 1) || ($event4_sync == 1) || ($event5_sync == 1) || ($event6_sync == 1) || ($event7_sync == 1)))} { :>
# Slot n async fifo reset synchronizers 
<: if { ($is_us_device == 0) } { :>
set_false_path -through [get_ports slot*aresetn] -to [get_pins -hierarchical -filter {NAME =~*mon_fifo_*/USE_MON_FIFO.async_fifo_inst/inst/*rstblk*/*PRE}]
set_false_path -through [get_ports core*aresetn] -to [get_pins -hierarchical -filter {NAME =~*mon_fifo_*/USE_MON_FIFO.async_fifo_inst/inst/*rstblk*/*PRE}]
set_false_path -from [get_cells -hierarchical -filter {NAME =~*mon_fifo_*/USE_MON_FIFO.async_fifo_inst/inst/*rstblk*/*rst_reg_reg[*]}]
set_false_path -to [get_pins -hierarchical -filter {NAME =~*/*rstblk*/*CLR}]
<: } else { :>
set_false_path -from [get_cells -hierarchical -filter {NAME =~*mon_fifo_*/USE_MON_FIFO.async_fifo_inst/inst/*rstblk*/*rst_reg_reg}]
set_false_path -from [get_cells -hierarchical -filter {NAME =~*mon_fifo_*/USE_MON_FIFO.async_fifo_inst/inst/*rstblk*/*rdrst_q3_reg*}]
<: } :>
<: } :>

<: if {($event_log == 1) || ($enable_trace == 1)} { :>
# Event log streaming fifo reset synchronizers 
<: if { ($is_us_device == 0) } { :>
set_false_path -through [get_ports slot*aresetn] -to [get_pins -hierarchical -filter {NAME =~*/async_fifo_inst/inst/*rstblk*/*PRE}]
set_false_path -through [get_ports core*aresetn] -to [get_pins -hierarchical -filter {NAME =~*/async_fifo_inst/inst/*rstblk*/*PRE}]
set_false_path -from [get_cells -hierarchical -filter {NAME =~*/async_fifo_inst/inst/*rstblk*/*rst_reg_reg[*]}]
<: } else { :>
set_false_path -from [get_cells -hierarchical -filter {NAME =~*/async_fifo_inst/inst/*rstblk*/*rst_reg_reg}]
set_false_path -from [get_cells -hierarchical -filter {NAME =~*/async_fifo_inst/inst/*rstblk*/*rdrst_q3_reg*}]
<: } :>
<: } :>

