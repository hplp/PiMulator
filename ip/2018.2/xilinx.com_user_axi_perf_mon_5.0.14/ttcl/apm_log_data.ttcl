<: set ComponentName [getComponentNameString] :>
<: setFileName [ttcl_string_concat "apm_log_data"] :>
<: setFileExtension ".v" :>
<: setOutputDirectory [ttcl_string_concat "./" $ComponentName "/example_design"] :>
<: set comment "//" :>
<: set s_axi_offld_id_width   [get_property "PARAM_VALUE.S_AXI_OFFLD_ID_WIDTH" [current_scope]] :>
<: set c_log_data_offld       [get_property "MODELPARAM_VALUE.C_LOG_DATA_OFFLD" [current_scope]] :>
<: set c_axis_dwidth_round_to_32  [get_property "MODELPARAM_VALUE.C_AXIS_DWIDTH_ROUND_TO_32" [current_scope]] :>
<#: ttcl/disclaimer.ttcl :>

//TestExdes
`timescale 1ns/1ps
(* DowngradeIPIdentifiedWarnings="yes" *)

module apm_log_data 
  #(
    parameter C_ENABLE_ADVANCED               = 1,
    parameter C_ENABLE_EVENT_LOG              = 1,
    parameter C_ENABLE_TRACE                  = 1,
    parameter C_FIFO_AXIS_TDATA_WIDTH         = 56,
    parameter C_EN_WR_ADD_FLAG                = 1, 
    parameter C_EN_FIRST_WRITE_FLAG           = 1, 
    parameter C_EN_LAST_WRITE_FLAG            = 1, 
    parameter C_EN_RESPONSE_FLAG              = 1, 
    parameter C_EN_RD_ADD_FLAG                = 1, 
    parameter C_EN_FIRST_READ_FLAG            = 1, 
    parameter C_EN_LAST_READ_FLAG             = 1,
    parameter C_SLOT_0_AXI_PROTOCOL           = "AXI4" 
  )
  (
  <: if { ($c_log_data_offld == 0) } {  :>
  input                                       m_axis_aclk,
  input                                       m_axis_aresetn,
  input [C_FIFO_AXIS_TDATA_WIDTH-1:0]         m_axis_tdata,
  input                                       m_axis_tvalid,
  output                                      m_axis_tready,
  <: } else { :>
  input                                   s_axi_offld_aclk,
  input                                   s_axi_offld_aresetn,
  output [31:0]                            s_axi_offld_araddr ,
  output reg                                   s_axi_offld_arvalid,
  output [7:0]                             s_axi_offld_arlen  ,
  <: if { ($s_axi_offld_id_width > 0) } {  :>
  output [ <=: s_axi_offld_id_width :> -1:0]        s_axi_offld_arid   ,    
  input  [ <=: s_axi_offld_id_width :> -1:0]       s_axi_offld_rid    ,      
  <: } :>
  input                                  s_axi_offld_arready,
  output reg                                   s_axi_offld_rready ,
  input [31:0]                           s_axi_offld_rdata  ,
  input [1:0]                            s_axi_offld_rresp  ,
  input                                  s_axi_offld_rvalid ,
  input                                  s_axi_offld_rlast ,
  <: } :>
  output                                      pass,
  output [1:0]                                status
  );

reg    pass_int;
reg [1:0]   status_int;

<: if { ($c_log_data_offld == 0) } {  :>
assign m_axis_tready = 1'b1;
  always @(posedge m_axis_aclk) begin
    if (m_axis_aresetn == 1'b0) begin
        pass_int <= 1'b0;
	status_int <= 2'b00;
    end
    else begin
        if (m_axis_tvalid == 1'b1) begin
           pass_int <= 1'b1;
	   status_int <= 2'b01;
        end
	else begin
           pass_int <= 1'b0;
	   status_int <= 2'b00;
	end
    end
  end

<: } else { :>
  reg rd_req;
  <: if { ($s_axi_offld_id_width > 0) } {  :>
  assign s_axi_offld_arid  = {<=: s_axi_offld_id_width :> {1'b0}};    
  <: } :>
  always @(posedge s_axi_offld_aclk) begin
    if (s_axi_offld_aresetn == 1'b0) begin
       s_axi_offld_arvalid <= 1'b0;
       rd_req <= 1'b0;
    end else if(rd_req == 1'b0 & s_axi_offld_arvalid == 1'b0) begin
       s_axi_offld_arvalid <= 1'b1;
       rd_req <= 1'b1;
    end else if(s_axi_offld_arvalid & s_axi_offld_arready) begin
       s_axi_offld_arvalid <= 1'b0;
    end
  end
  assign s_axi_offld_araddr = 32'h0;
    wire [7:0] rd_len;
    assign rd_len = ( <=: c_axis_dwidth_round_to_32 :>/32 -1 );
    assign s_axi_offld_arlen = rd_len;
  always @(posedge s_axi_offld_aclk) begin
    if (s_axi_offld_aresetn == 1'b0) begin
       s_axi_offld_rready <= 1'b0;
       rd_req <= 1'b0;
    end else if(s_axi_offld_arvalid & s_axi_offld_arready) begin
       s_axi_offld_rready <= 1'b1;
    end else if(s_axi_offld_rvalid & s_axi_offld_rready & s_axi_offld_rlast) begin
       s_axi_offld_rready <= 1'b0;
    end
  end
  always @(posedge s_axi_offld_aclk) begin
    if (s_axi_offld_aresetn == 1'b0) begin
       pass_int <= 1'b0;
       status_int <= 2'b00;
    end else if(s_axi_offld_rvalid & s_axi_offld_rready & s_axi_offld_rlast) begin
       pass_int <= 1'b1;
       if(s_axi_offld_rresp == 2'b00) 
         status_int <= 2'b01;
       else
         status_int <= 2'b00;
    end else begin
       pass_int <= 1'b0;
       status_int <= 2'b00;
    end
  end
<: } :>

 assign pass = pass_int;
 assign status = status_int;

endmodule
