<: set ComponentName [getComponentNameString] :>
<: setFileName [ttcl_string_concat $ComponentName "_exdes"] :>
<: setFileExtension ".v" :>
<: setOutputDirectory [ttcl_string_concat "./" $ComponentName "/example_design"] :>
<: set c_family                [getStringValue "C_FAMILY"] :>
<: set c_s_axi_data_width      [getIntValue "C_S_AXI_DATA_WIDTH"] :>
<: set id_reflection           [getIntValue "C_SUPPORT_ID_REFLECTION"] :>
<: set enable_ext_triggers     [get_property "PARAM_VALUE.ENABLE_EXT_TRIGGERS" [current_scope]] :>
<: set c_s_axi_addr_width      [getIntValue "C_S_AXI_ADDR_WIDTH"] :>
<: set c_num_of_mon_slots      [getIntValue "C_NUM_MONITOR_SLOTS"] :>
<: set c_enable_advanced      [getIntValue "C_ENABLE_ADVANCED"] :>
<: set c_enable_profile       [getIntValue "C_ENABLE_PROFILE"] :>
<: set c_enable_trace         [getIntValue "C_ENABLE_TRACE"] :>
<: set c_log_data_offld       [get_property "MODELPARAM_VALUE.C_LOG_DATA_OFFLD" [current_scope]] :>
<: set s_axi_offld_id_width   [get_property "PARAM_VALUE.S_AXI_OFFLD_ID_WIDTH" [current_scope]] :>
<: set c_enable_event_log     [getIntValue "C_ENABLE_EVENT_LOG"] :>
<: set c_enable_event_count   [getIntValue "C_ENABLE_EVENT_COUNT"] :>
<: set c_slot_0_axi_protocol      [getStringValue "C_SLOT_0_AXI_PROTOCOL"] :>
<: set c_slot_1_axi_protocol      [getStringValue "C_SLOT_1_AXI_PROTOCOL"] :>
<: set c_slot_2_axi_protocol      [getStringValue "C_SLOT_2_AXI_PROTOCOL"] :>
<: set c_slot_3_axi_protocol      [getStringValue "C_SLOT_3_AXI_PROTOCOL"] :>
<: set c_slot_4_axi_protocol      [getStringValue "C_SLOT_4_AXI_PROTOCOL"] :>
<: set c_slot_5_axi_protocol      [getStringValue "C_SLOT_5_AXI_PROTOCOL"] :>
<: set c_slot_6_axi_protocol      [getStringValue "C_SLOT_6_AXI_PROTOCOL"] :>
<: set c_slot_7_axi_protocol      [getStringValue "C_SLOT_7_AXI_PROTOCOL"] :>
<: set c_slot_0_axi_data_width      [getIntValue "C_SLOT_0_AXI_DATA_WIDTH"] :>
<: set c_slot_1_axi_data_width      [getIntValue "C_SLOT_1_AXI_DATA_WIDTH"] :>
<: set c_slot_2_axi_data_width      [getIntValue "C_SLOT_2_AXI_DATA_WIDTH"] :>
<: set c_slot_3_axi_data_width      [getIntValue "C_SLOT_3_AXI_DATA_WIDTH"] :>
<: set c_slot_4_axi_data_width      [getIntValue "C_SLOT_4_AXI_DATA_WIDTH"] :>
<: set c_slot_5_axi_data_width      [getIntValue "C_SLOT_5_AXI_DATA_WIDTH"] :>
<: set c_slot_6_axi_data_width      [getIntValue "C_SLOT_6_AXI_DATA_WIDTH"] :>
<: set c_slot_7_axi_data_width      [getIntValue "C_SLOT_7_AXI_DATA_WIDTH"] :>
<: set c_slot_0_axi_addr_width      [getIntValue "C_SLOT_0_AXI_ADDR_WIDTH"] :>
<: set c_slot_1_axi_addr_width      [getIntValue "C_SLOT_1_AXI_ADDR_WIDTH"] :>
<: set c_slot_2_axi_addr_width      [getIntValue "C_SLOT_2_AXI_ADDR_WIDTH"] :>
<: set c_slot_3_axi_addr_width      [getIntValue "C_SLOT_3_AXI_ADDR_WIDTH"] :>
<: set c_slot_4_axi_addr_width      [getIntValue "C_SLOT_4_AXI_ADDR_WIDTH"] :>
<: set c_slot_5_axi_addr_width      [getIntValue "C_SLOT_5_AXI_ADDR_WIDTH"] :>
<: set c_slot_6_axi_addr_width      [getIntValue "C_SLOT_6_AXI_ADDR_WIDTH"] :>
<: set c_slot_7_axi_addr_width      [getIntValue "C_SLOT_7_AXI_ADDR_WIDTH"] :>
<: set c_slot_0_axi_id_width      [getIntValue "C_SLOT_0_AXI_ID_WIDTH"] :>
<: set c_slot_1_axi_id_width      [getIntValue "C_SLOT_1_AXI_ID_WIDTH"] :>
<: set c_slot_2_axi_id_width      [getIntValue "C_SLOT_2_AXI_ID_WIDTH"] :>
<: set c_slot_3_axi_id_width      [getIntValue "C_SLOT_3_AXI_ID_WIDTH"] :>
<: set c_slot_4_axi_id_width      [getIntValue "C_SLOT_4_AXI_ID_WIDTH"] :>
<: set c_slot_5_axi_id_width      [getIntValue "C_SLOT_5_AXI_ID_WIDTH"] :>
<: set c_slot_6_axi_id_width      [getIntValue "C_SLOT_6_AXI_ID_WIDTH"] :>
<: set c_slot_7_axi_id_width      [getIntValue "C_SLOT_7_AXI_ID_WIDTH"] :>
<: set c_slot_0_axis_tdata_width      [getIntValue "C_SLOT_0_AXIS_TDATA_WIDTH"] :>
<: set c_slot_1_axis_tdata_width      [getIntValue "C_SLOT_1_AXIS_TDATA_WIDTH"] :>
<: set c_slot_2_axis_tdata_width      [getIntValue "C_SLOT_2_AXIS_TDATA_WIDTH"] :>
<: set c_slot_3_axis_tdata_width      [getIntValue "C_SLOT_3_AXIS_TDATA_WIDTH"] :>
<: set c_slot_4_axis_tdata_width      [getIntValue "C_SLOT_4_AXIS_TDATA_WIDTH"] :>
<: set c_slot_5_axis_tdata_width      [getIntValue "C_SLOT_5_AXIS_TDATA_WIDTH"] :>
<: set c_slot_6_axis_tdata_width      [getIntValue "C_SLOT_6_AXIS_TDATA_WIDTH"] :>
<: set c_slot_7_axis_tdata_width      [getIntValue "C_SLOT_7_AXIS_TDATA_WIDTH"] :>
<: set c_slot_0_axis_tid_width      [getIntValue "C_SLOT_0_AXIS_TID_WIDTH"] :>
<: set c_slot_1_axis_tid_width      [getIntValue "C_SLOT_1_AXIS_TID_WIDTH"] :>
<: set c_slot_2_axis_tid_width      [getIntValue "C_SLOT_2_AXIS_TID_WIDTH"] :>
<: set c_slot_3_axis_tid_width      [getIntValue "C_SLOT_3_AXIS_TID_WIDTH"] :>
<: set c_slot_4_axis_tid_width      [getIntValue "C_SLOT_4_AXIS_TID_WIDTH"] :>
<: set c_slot_5_axis_tid_width      [getIntValue "C_SLOT_5_AXIS_TID_WIDTH"] :>
<: set c_slot_6_axis_tid_width      [getIntValue "C_SLOT_6_AXIS_TID_WIDTH"] :>
<: set c_slot_7_axis_tid_width      [getIntValue "C_SLOT_7_AXIS_TID_WIDTH"] :>
<: set c_slot_0_axis_tdest_width      [getIntValue "C_SLOT_0_AXIS_TDEST_WIDTH"] :>
<: set c_slot_1_axis_tdest_width      [getIntValue "C_SLOT_1_AXIS_TDEST_WIDTH"] :>
<: set c_slot_2_axis_tdest_width      [getIntValue "C_SLOT_2_AXIS_TDEST_WIDTH"] :>
<: set c_slot_3_axis_tdest_width      [getIntValue "C_SLOT_3_AXIS_TDEST_WIDTH"] :>
<: set c_slot_4_axis_tdest_width      [getIntValue "C_SLOT_4_AXIS_TDEST_WIDTH"] :>
<: set c_slot_5_axis_tdest_width      [getIntValue "C_SLOT_5_AXIS_TDEST_WIDTH"] :>
<: set c_slot_6_axis_tdest_width      [getIntValue "C_SLOT_6_AXIS_TDEST_WIDTH"] :>
<: set c_slot_7_axis_tdest_width      [getIntValue "C_SLOT_7_AXIS_TDEST_WIDTH"] :>
<: set c_slot_0_axis_tuser_width      [getIntValue "C_SLOT_0_AXIS_TUSER_WIDTH"] :>
<: set c_slot_1_axis_tuser_width      [getIntValue "C_SLOT_1_AXIS_TUSER_WIDTH"] :>
<: set c_slot_2_axis_tuser_width      [getIntValue "C_SLOT_2_AXIS_TUSER_WIDTH"] :>
<: set c_slot_3_axis_tuser_width      [getIntValue "C_SLOT_3_AXIS_TUSER_WIDTH"] :>
<: set c_slot_4_axis_tuser_width      [getIntValue "C_SLOT_4_AXIS_TUSER_WIDTH"] :>
<: set c_slot_5_axis_tuser_width      [getIntValue "C_SLOT_5_AXIS_TUSER_WIDTH"] :>
<: set c_slot_6_axis_tuser_width      [getIntValue "C_SLOT_6_AXIS_TUSER_WIDTH"] :>
<: set c_slot_7_axis_tuser_width      [getIntValue "C_SLOT_7_AXIS_TUSER_WIDTH"] :>
<: set enable_ext_events              [getIntValue "ENABLE_EXT_EVENTS"] :>
<: set c_m_axis_tdata_width           [getIntValue "C_FIFO_AXIS_TDATA_WIDTH"] :>
<: set c_m_axis_tid_width             [getIntValue "C_FIFO_AXIS_TID_WIDTH"] :>
<: set en_wr_add_flag                 [getIntValue "C_EN_WR_ADD_FLAG"] :>
<: set en_first_write_flag            [getIntValue "C_EN_FIRST_WRITE_FLAG"] :>
<: set en_last_write_flag             [getIntValue "C_EN_LAST_WRITE_FLAG"] :>
<: set en_response_flag               [getIntValue "C_EN_RESPONSE_FLAG"] :>
<: set en_rd_add_flag                 [getIntValue "C_EN_RD_ADD_FLAG"] :>
<: set en_first_read_flag             [getIntValue "C_EN_FIRST_READ_FLAG"] :>
<: set en_last_read_flag              [getIntValue "C_EN_LAST_READ_FLAG"] :>
<: set slot0_id     [get_property "PARAM_VALUE.C_SLOT_0_AXI_ID_WIDTH" [current_scope]] :>
<: set slot1_id     [get_property "PARAM_VALUE.C_SLOT_1_AXI_ID_WIDTH" [current_scope]] :>
<: set slot2_id     [get_property "PARAM_VALUE.C_SLOT_2_AXI_ID_WIDTH" [current_scope]] :>
<: set slot3_id     [get_property "PARAM_VALUE.C_SLOT_3_AXI_ID_WIDTH" [current_scope]] :>
<: set slot4_id     [get_property "PARAM_VALUE.C_SLOT_4_AXI_ID_WIDTH" [current_scope]] :>
<: set slot5_id     [get_property "PARAM_VALUE.C_SLOT_5_AXI_ID_WIDTH" [current_scope]] :>
<: set slot6_id     [get_property "PARAM_VALUE.C_SLOT_6_AXI_ID_WIDTH" [current_scope]] :>
<: set slot7_id     [get_property "PARAM_VALUE.C_SLOT_7_AXI_ID_WIDTH" [current_scope]] :>
<: set slot0_tid     [get_property "PARAM_VALUE.C_SLOT_0_AXIS_TID_WIDTH" [current_scope]] :>
<: set slot1_tid     [get_property "PARAM_VALUE.C_SLOT_1_AXIS_TID_WIDTH" [current_scope]] :>
<: set slot2_tid     [get_property "PARAM_VALUE.C_SLOT_2_AXIS_TID_WIDTH" [current_scope]] :>
<: set slot3_tid     [get_property "PARAM_VALUE.C_SLOT_3_AXIS_TID_WIDTH" [current_scope]] :>
<: set slot4_tid     [get_property "PARAM_VALUE.C_SLOT_4_AXIS_TID_WIDTH" [current_scope]] :>
<: set slot5_tid     [get_property "PARAM_VALUE.C_SLOT_5_AXIS_TID_WIDTH" [current_scope]] :>
<: set slot6_tid     [get_property "PARAM_VALUE.C_SLOT_6_AXIS_TID_WIDTH" [current_scope]] :>
<: set slot7_tid     [get_property "PARAM_VALUE.C_SLOT_7_AXIS_TID_WIDTH" [current_scope]] :>
<: set slot0_tdest     [get_property "PARAM_VALUE.C_SLOT_0_AXIS_TDEST_WIDTH" [current_scope]] :>
<: set slot1_tdest     [get_property "PARAM_VALUE.C_SLOT_1_AXIS_TDEST_WIDTH" [current_scope]] :>
<: set slot2_tdest     [get_property "PARAM_VALUE.C_SLOT_2_AXIS_TDEST_WIDTH" [current_scope]] :>
<: set slot3_tdest     [get_property "PARAM_VALUE.C_SLOT_3_AXIS_TDEST_WIDTH" [current_scope]] :>
<: set slot4_tdest     [get_property "PARAM_VALUE.C_SLOT_4_AXIS_TDEST_WIDTH" [current_scope]] :>
<: set slot5_tdest     [get_property "PARAM_VALUE.C_SLOT_5_AXIS_TDEST_WIDTH" [current_scope]] :>
<: set slot6_tdest     [get_property "PARAM_VALUE.C_SLOT_6_AXIS_TDEST_WIDTH" [current_scope]] :>
<: set slot7_tdest     [get_property "PARAM_VALUE.C_SLOT_7_AXIS_TDEST_WIDTH" [current_scope]] :>
<: set slot0_tuser     [get_property "PARAM_VALUE.C_SLOT_0_AXIS_TUSER_WIDTH" [current_scope]] :>
<: set slot1_tuser     [get_property "PARAM_VALUE.C_SLOT_1_AXIS_TUSER_WIDTH" [current_scope]] :>
<: set slot2_tuser     [get_property "PARAM_VALUE.C_SLOT_2_AXIS_TUSER_WIDTH" [current_scope]] :>
<: set slot3_tuser     [get_property "PARAM_VALUE.C_SLOT_3_AXIS_TUSER_WIDTH" [current_scope]] :>
<: set slot4_tuser     [get_property "PARAM_VALUE.C_SLOT_4_AXIS_TUSER_WIDTH" [current_scope]] :>
<: set slot5_tuser     [get_property "PARAM_VALUE.C_SLOT_5_AXIS_TUSER_WIDTH" [current_scope]] :>
<: set slot6_tuser     [get_property "PARAM_VALUE.C_SLOT_6_AXIS_TUSER_WIDTH" [current_scope]] :>
<: set slot7_tuser     [get_property "PARAM_VALUE.C_SLOT_7_AXIS_TUSER_WIDTH" [current_scope]] :>
<: set wd [ file dirname [ get_property xml_file_name [ current_ipbom ] ] ] :>
<: set comment "//" :>
<#: ttcl/disclaimer.ttcl :>

//TestExdes
`timescale 1ns/1ps
(* DowngradeIPIdentifiedWarnings="yes" *)

module <=: ComponentName :>_exdes (
input  clk_in1_p   ,
input  clk_in1_n,
input  reset,    
output done ,
output status       
); 

//AXI4-Lite agent ch1 signals
wire [31 : 0]   s_axi_awaddr;
wire [2 : 0 ]   s_axi_awprot;
wire            s_axi_awvalid;
wire            s_axi_awready;
wire [31 : 0]   s_axi_wdata;
wire [3 : 0 ]   s_axi_wstrb;
wire            s_axi_wvalid;
wire            s_axi_wready;
wire [1 : 0 ]   s_axi_bresp;
wire            s_axi_bvalid;
wire            s_axi_bready;
wire [31 : 0]   s_axi_araddr;
wire            s_axi_arvalid;
wire            s_axi_arready;
wire [31 : 0]   s_axi_rdata;
wire            s_axi_rvalid;
wire            s_axi_rready;
wire [1 : 0 ]   s_axi_rresp;

//AXI4-Lite agent ch2 signals
wire [31 : 0]   s_axi2_awaddr;
wire [2 : 0 ]   s_axi2_awprot;
wire            s_axi2_awvalid;
wire            s_axi2_awready;
wire [31 : 0]   s_axi2_wdata;
wire [3 : 0 ]   s_axi2_wstrb;
wire            s_axi2_wvalid;
wire            s_axi2_wready;
wire [1 : 0 ]   s_axi2_bresp;
wire            s_axi2_bvalid;
wire            s_axi2_bready;
wire [31 : 0]   s_axi2_araddr;
wire            s_axi2_arvalid;
wire            s_axi2_arready;
wire [31 : 0]   s_axi2_rdata;
wire            s_axi2_rvalid;
wire            s_axi2_rready;
wire [1 : 0 ]   s_axi2_rresp;

//AXI4-Lite agent ch3 signals
wire [31 : 0]   s_axi3_awaddr;
wire [2 : 0 ]   s_axi3_awprot;
wire            s_axi3_awvalid;
wire            s_axi3_awready;
wire [31 : 0]   s_axi3_wdata;
wire [3 : 0 ]   s_axi3_wstrb;
wire            s_axi3_wvalid;
wire            s_axi3_wready;
wire [1 : 0 ]   s_axi3_bresp;
wire            s_axi3_bvalid;
wire            s_axi3_bready;
wire [31 : 0]   s_axi3_araddr;
wire            s_axi3_arvalid;
wire            s_axi3_arready;
wire [31 : 0]   s_axi3_rdata;
wire            s_axi3_rvalid;
wire            s_axi3_rready;
wire [1 : 0 ]   s_axi3_rresp;

<: if { $c_slot_0_axi_protocol == "AXI4" || $c_slot_0_axi_protocol == "AXI4LITE" || $c_slot_0_axi_protocol == "AXI3" || :>
<:        $c_slot_1_axi_protocol == "AXI4" || $c_slot_1_axi_protocol == "AXI4LITE" || $c_slot_1_axi_protocol == "AXI3" || :>
<:        $c_slot_2_axi_protocol == "AXI4" || $c_slot_2_axi_protocol == "AXI4LITE" || $c_slot_2_axi_protocol == "AXI3" || :>
<:        $c_slot_3_axi_protocol == "AXI4" || $c_slot_3_axi_protocol == "AXI4LITE" || $c_slot_3_axi_protocol == "AXI3" || :>
<:        $c_slot_4_axi_protocol == "AXI4" || $c_slot_4_axi_protocol == "AXI4LITE" || $c_slot_4_axi_protocol == "AXI3" || :>
<:        $c_slot_5_axi_protocol == "AXI4" || $c_slot_5_axi_protocol == "AXI4LITE" || $c_slot_5_axi_protocol == "AXI3" || :>
<:        $c_slot_6_axi_protocol == "AXI4" || $c_slot_6_axi_protocol == "AXI4LITE" || $c_slot_6_axi_protocol == "AXI3" || :>
<:        $c_slot_7_axi_protocol == "AXI4" || $c_slot_7_axi_protocol == "AXI4LITE" || $c_slot_7_axi_protocol == "AXI3"    } {  :>
//AXI4 Signals
wire  [5 : 0 ]                           m_axi_awid;
wire  [31 : 0]                           m_axi_awaddr;
wire  [7 : 0 ]                           m_axi_awlen;
wire  [2 : 0 ]                           m_axi_awsize;
wire  [1 : 0 ]                           m_axi_awburst;
wire  [0 : 0 ]                           m_axi_awlock;
wire  [3 : 0 ]                           m_axi_awcache;
wire  [2 : 0 ]                           m_axi_awprot;
wire  [3 : 0 ]                           m_axi_awqos;
wire  [7 : 0 ]                           m_axi_awuser;
wire                                     m_axi_awvalid;
wire                                     m_axi_awready;
wire                                     m_axi_wlast;
wire  [511 : 0]                          m_axi_wdata;
wire  [63  : 0]                          m_axi_wstrb;
wire                                     m_axi_wvalid;
wire                                     m_axi_wready;
wire  [5 : 0 ]                           m_axi_bid;
wire  [1 : 0 ]                           m_axi_bresp;
wire                                     m_axi_bvalid;
wire                                     m_axi_bready;
wire  [5 : 0 ]                           m_axi_arid;
wire  [31 : 0]                           m_axi_araddr;
wire  [7 : 0 ]                           m_axi_arlen;
wire  [2 : 0 ]                           m_axi_arsize;
wire  [1 : 0 ]                           m_axi_arburst;
wire  [0 : 0 ]                           m_axi_arlock;
wire  [3 : 0 ]                           m_axi_arcache;
wire  [2 : 0 ]                           m_axi_arprot;
wire  [3 : 0 ]                           m_axi_arqos;
wire  [7 : 0 ]                           m_axi_aruser;
wire                                     m_axi_arvalid;
wire                                     m_axi_arready;
wire  [5 : 0 ]                           m_axi_rid;
wire                                     m_axi_rlast;
wire  [511 : 0]                          m_axi_rdata;
wire  [1 : 0 ]                           m_axi_rresp;
wire                                     m_axi_rvalid;
wire                                     m_axi_rready;
// Exdes internal signals
wire [15 : 0 ]                           m_axi_awid_int;
wire [1023 : 0]                          m_axi_wdata_int;
wire [127  : 0]                          m_axi_wstrb_int;
wire [15 : 0 ]                           m_axi_bid_int;
wire [15 : 0 ]                           m_axi_arid_int;
wire [15 : 0 ]                           m_axi_rid_int;
wire [1023 : 0]                          m_axi_rdata_int;

<: } :>

<: if { $c_slot_0_axi_protocol == "AXI4S" || :>
<:        $c_slot_1_axi_protocol == "AXI4S" || :>
<:        $c_slot_2_axi_protocol == "AXI4S" || :>
<:        $c_slot_3_axi_protocol == "AXI4S" || :>
<:        $c_slot_4_axi_protocol == "AXI4S" || :>
<:        $c_slot_5_axi_protocol == "AXI4S" || :>
<:        $c_slot_6_axi_protocol == "AXI4S" || :>
<:        $c_slot_7_axi_protocol == "AXI4S"    } {  :>
//AXI4 Stream Signals
wire                                     m_axis_1_tready;
wire                                     m_axis_1_tvalid;
wire                                     m_axis_1_tlast;
wire [1023 : 0]                          m_axis_1_tdata;
wire [127 : 0]                           m_axis_1_tstrb;
wire [127 : 0]                           m_axis_1_tkeep;
wire [255 : 0]                           m_axis_1_tuser;
wire [15 : 0]                            m_axis_1_tid;
wire [7 : 0]                             m_axis_1_tdest;
<: } :>

<: if { ($c_enable_event_log == 1 || $c_enable_trace == 1) } {  :>
// APM Log interface signals
wire                                              log_pass;
wire [1:0]                                        log_status;
<: if { ($c_log_data_offld == 0) } {  :>
wire [<=: c_m_axis_tdata_width :> -1:0]           m_axis_tdata;
wire [<=: c_m_axis_tdata_width :>/8 -1  :0]       m_axis_tstrb; 
wire                                              m_axis_tvalid;
wire [<=: c_m_axis_tid_width :> -1:0]             m_axis_tid;
wire                                              m_axis_tready;
<: } else { :>
wire [31:0]                            s_axi_offld_araddr ;
wire                                   s_axi_offld_arvalid;
wire [7:0]                             s_axi_offld_arlen  ;
<: if { ($s_axi_offld_id_width > 0) } { :>
wire [<=: s_axi_offld_id_width :> -1:0]        s_axi_offld_arid   ;    
wire  [<=: s_axi_offld_id_width :> -1:0]       s_axi_offld_rid    ;      
<: } :>
wire                                   s_axi_offld_arready;
wire                                   s_axi_offld_rready ;
wire  [31:0]                           s_axi_offld_rdata  ;
wire  [1:0]                            s_axi_offld_rresp  ;
wire                                   s_axi_offld_rvalid ;
wire                                   s_axi_offld_rlast ;
<: } :>
<: } :>

//APM Interrupt signal
wire                                     intr;
wire                                     done_count;
wire [31:0]                              status_count;
wire                                     locked;
//--------------------------------------------------------------------
// Clock generator instance
//--------------------------------------------------------------------

clock_gen CLOCK_GEN_INST1( 
           .clk_in1_p   (clk_in1_p ),
           .clk_in1_n   (clk_in1_n ),
           .reset       (reset     ),
           .locked      (locked    ),
           .clock_lite  (s_axi_aclk),
           .clock       (          )
	   );



wire s_axi_aresetn = locked;
wire core_aresetn  = locked;

//--------------------------------------------------------------------
//AXI4 Lite Driver Instance
//--------------------------------------------------------------------

atg_lite_agent axi_lite_source_inst (
  .s_axi_aclk              (s_axi_aclk            ),   // input s_axi_aclk
  .s_axi_aresetn           (s_axi_aresetn         ),   // input s_axi_aresetn
  .m_axi_lite_ch1_awaddr   (s_axi_awaddr          ),   // output [31 : 0] m_axi_lite_ch1_awaddr
  .m_axi_lite_ch1_awprot   (s_axi_awprot          ),   // output [2 : 0] m_axi_lite_ch1_awprot
  .m_axi_lite_ch1_awvalid  (s_axi_awvalid         ),   // output m_axi_lite_ch1_awvalid
  .m_axi_lite_ch1_awready  (s_axi_awready         ),   // input m_axi_lite_ch1_awready
  .m_axi_lite_ch1_wdata    (s_axi_wdata           ),   // output [31 : 0] m_axi_lite_ch1_wdata
  .m_axi_lite_ch1_wstrb    (s_axi_wstrb           ),   // output [3 : 0] m_axi_lite_ch1_wstrb
  .m_axi_lite_ch1_wvalid   (s_axi_wvalid          ),   // output m_axi_lite_ch1_wvalid
  .m_axi_lite_ch1_wready   (s_axi_wready          ),   // input m_axi_lite_ch1_wready
  .m_axi_lite_ch1_bresp    (s_axi_bresp           ),   // input [1 : 0] m_axi_lite_ch1_bresp
  .m_axi_lite_ch1_bvalid   (s_axi_bvalid          ),   // input m_axi_lite_ch1_bvalid
  .m_axi_lite_ch1_bready   (s_axi_bready          ),   // output m_axi_lite_ch1_bready
  .m_axi_lite_ch1_araddr   (s_axi_araddr          ),   // output [31 : 0] m_axi_lite_ch1_araddr
  .m_axi_lite_ch1_arvalid  (s_axi_arvalid         ),   // output m_axi_lite_ch1_arvalid
  .m_axi_lite_ch1_arready  (s_axi_arready         ),   // input m_axi_lite_ch1_arready
  .m_axi_lite_ch1_rdata    (s_axi_rdata           ),   // input [31 : 0] m_axi_lite_ch1_rdata
  .m_axi_lite_ch1_rvalid   (s_axi_rvalid          ),   // input m_axi_lite_ch1_rvalid
  .m_axi_lite_ch1_rready   (s_axi_rready          ),   // output m_axi_lite_ch1_rready
  .m_axi_lite_ch1_rresp    (s_axi_rresp           ),   // input [1 : 0] m_axi_lite_ch1_rresp
  .m_axi_lite_ch2_awaddr   (s_axi2_awaddr         ),   // output [31 : 0] m_axi_lite_ch2_awaddr
  .m_axi_lite_ch2_awprot   (s_axi2_awprot         ),   // output [2 : 0] m_axi_lite_ch2_awprot
  .m_axi_lite_ch2_awvalid  (s_axi2_awvalid        ),   // output m_axi_lite_ch2_awvalid
  .m_axi_lite_ch2_awready  (s_axi2_awready        ),   // input m_axi_lite_ch2_awready
  .m_axi_lite_ch2_wdata    (s_axi2_wdata          ),   // output [31 : 0] m_axi_lite_ch2_wdata
  .m_axi_lite_ch2_wstrb    (s_axi2_wstrb          ),   // output [3 : 0] m_axi_lite_ch2_wstrb
  .m_axi_lite_ch2_wvalid   (s_axi2_wvalid         ),   // output m_axi_lite_ch2_wvalid
  .m_axi_lite_ch2_wready   (s_axi2_wready         ),   // input m_axi_lite_ch2_wready
  .m_axi_lite_ch2_bresp    (s_axi2_bresp          ),   // input [1 : 0] m_axi_lite_ch2_bresp
  .m_axi_lite_ch2_bvalid   (s_axi2_bvalid         ),   // input m_axi_lite_ch2_bvalid
  .m_axi_lite_ch2_bready   (s_axi2_bready         ),   // output m_axi_lite_ch2_bready
  .m_axi_lite_ch2_araddr   (s_axi2_araddr         ),   // output [31 : 0] m_axi_lite_ch2_araddr
  .m_axi_lite_ch2_arvalid  (s_axi2_arvalid        ),   // output m_axi_lite_ch2_arvalid
  .m_axi_lite_ch2_arready  (s_axi2_arready        ),   // input m_axi_lite_ch2_arready
  .m_axi_lite_ch2_rdata    (s_axi2_rdata          ),   // input [31 : 0] m_axi_lite_ch2_rdata
  .m_axi_lite_ch2_rvalid   (s_axi2_rvalid         ),   // input m_axi_lite_ch2_rvalid
  .m_axi_lite_ch2_rready   (s_axi2_rready         ),   // output m_axi_lite_ch2_rready
  .m_axi_lite_ch2_rresp    (s_axi2_rresp          ),   // input [1 : 0] m_axi_lite_ch2_rresp
  .m_axi_lite_ch3_awaddr   (s_axi3_awaddr         ),   // output [31 : 0] m_axi_lite_ch3_awaddr
  .m_axi_lite_ch3_awprot   (s_axi3_awprot         ),   // output [2 : 0] m_axi_lite_ch3_awprot
  .m_axi_lite_ch3_awvalid  (s_axi3_awvalid        ),   // output m_axi_lite_ch3_awvalid
  .m_axi_lite_ch3_awready  (s_axi3_awready        ),   // input m_axi_lite_ch3_awready
  .m_axi_lite_ch3_wdata    (s_axi3_wdata          ),   // output [31 : 0] m_axi_lite_ch3_wdata
  .m_axi_lite_ch3_wstrb    (s_axi3_wstrb          ),   // output [3 : 0] m_axi_lite_ch3_wstrb
  .m_axi_lite_ch3_wvalid   (s_axi3_wvalid         ),   // output m_axi_lite_ch3_wvalid
  .m_axi_lite_ch3_wready   (s_axi3_wready         ),   // input m_axi_lite_ch3_wready
  .m_axi_lite_ch3_bresp    (s_axi3_bresp          ),   // input [1 : 0] m_axi_lite_ch3_bresp
  .m_axi_lite_ch3_bvalid   (s_axi3_bvalid         ),   // input m_axi_lite_ch3_bvalid
  .m_axi_lite_ch3_bready   (s_axi3_bready         ),   // output m_axi_lite_ch3_bready
  .m_axi_lite_ch3_araddr   (s_axi3_araddr         ),   // output [31 : 0] m_axi_lite_ch3_araddr
  .m_axi_lite_ch3_arvalid  (s_axi3_arvalid        ),   // output m_axi_lite_ch3_arvalid
  .m_axi_lite_ch3_arready  (s_axi3_arready        ),   // input m_axi_lite_ch3_arready
  .m_axi_lite_ch3_rdata    (s_axi3_rdata          ),   // input [31 : 0] m_axi_lite_ch3_rdata
  .m_axi_lite_ch3_rvalid   (s_axi3_rvalid         ),   // input m_axi_lite_ch3_rvalid
  .m_axi_lite_ch3_rready   (s_axi3_rready         ),   // output m_axi_lite_ch3_rready
  .m_axi_lite_ch3_rresp    (s_axi3_rresp          ),   // input [1 : 0] m_axi_lite_ch3_rresp
  .done                    (done_count            ),   // output done
  .status                  (status_count          )    // output [31 : 0] status
);

<: if { $c_slot_0_axi_protocol == "AXI4" || $c_slot_0_axi_protocol == "AXI4LITE" || $c_slot_0_axi_protocol == "AXI3" || :>
<:        $c_slot_1_axi_protocol == "AXI4" || $c_slot_1_axi_protocol == "AXI4LITE" || $c_slot_1_axi_protocol == "AXI3" || :>
<:        $c_slot_2_axi_protocol == "AXI4" || $c_slot_2_axi_protocol == "AXI4LITE" || $c_slot_2_axi_protocol == "AXI3" || :>
<:        $c_slot_3_axi_protocol == "AXI4" || $c_slot_3_axi_protocol == "AXI4LITE" || $c_slot_3_axi_protocol == "AXI3" || :>
<:        $c_slot_4_axi_protocol == "AXI4" || $c_slot_4_axi_protocol == "AXI4LITE" || $c_slot_4_axi_protocol == "AXI3" || :>
<:        $c_slot_5_axi_protocol == "AXI4" || $c_slot_5_axi_protocol == "AXI4LITE" || $c_slot_5_axi_protocol == "AXI3" || :>
<:        $c_slot_6_axi_protocol == "AXI4" || $c_slot_6_axi_protocol == "AXI4LITE" || $c_slot_6_axi_protocol == "AXI3" || :>
<:        $c_slot_7_axi_protocol == "AXI4" || $c_slot_7_axi_protocol == "AXI4LITE" || $c_slot_7_axi_protocol == "AXI3"    } {  :>

//------------------------------------------------------------------------
// Monitor Interface instance for AXI4
//------------------------------------------------------------------------
atg_axi_source  axi_full_source_inst(
  .s_axi_aclk         (s_axi_aclk      ),    // input s_axi_aclk
  .s_axi_aresetn      (s_axi_aresetn   ),    // input s_axi_aresetn
  .s_axi_awid         (1'b0             ),    // input [0 : 0] s_axi_awid
  .s_axi_awaddr       (s_axi2_awaddr   ),    // input [31 : 0] s_axi_awaddr
  .s_axi_awlen        (8'b0             ),    // input [7 : 0] s_axi_awlen
  .s_axi_awsize       (3'b0             ),    // input [2 : 0] s_axi_awsize
  .s_axi_awburst      (2'b0             ),    // input [1 : 0] s_axi_awburst
  .s_axi_awlock       (1'b0             ),    // input [0 : 0] s_axi_awlock
  .s_axi_awcache      (4'b0             ),    // input [3 : 0] s_axi_awcache
  .s_axi_awprot       (3'b0             ),    // input [2 : 0] s_axi_awprot
  .s_axi_awqos        (4'b0             ),    // input [3 : 0] s_axi_awqos
  .s_axi_awuser       (8'b0             ),    // input [7 : 0] s_axi_awuser
  .s_axi_awvalid      (s_axi2_awvalid  ),    // input s_axi_awvalid
  .s_axi_awready      (s_axi2_awready  ),    // output s_axi_awready
  .s_axi_wlast        (1'b1             ),    // input s_axi_wlast
  .s_axi_wdata        (s_axi2_wdata    ),    // input [31 : 0] s_axi_wdata
  .s_axi_wstrb        (4'hF             ),    // input [3 : 0] s_axi_wstrb
  .s_axi_wvalid       (s_axi2_wvalid   ),    // input s_axi_wvalid
  .s_axi_wready       (s_axi2_wready   ),    // output s_axi_wready
  .s_axi_bid          (                ),    // output [0 : 0] s_axi_bid
  .s_axi_bresp        (s_axi2_bresp    ),    // output [1 : 0] s_axi_bresp
  .s_axi_bvalid       (s_axi2_bvalid   ),    // output s_axi_bvalid
  .s_axi_bready       (s_axi2_bready   ),    // input s_axi_bready
  .s_axi_arid         (1'b0             ),    // input [0 : 0] s_axi_arid
  .s_axi_araddr       (s_axi2_araddr   ),    // input [31 : 0] s_axi_araddr
  .s_axi_arlen        (8'b0             ),    // input [7 : 0] s_axi_arlen
  .s_axi_arsize       (3'b0             ),    // input [2 : 0] s_axi_arsize
  .s_axi_arburst      (2'b0             ),    // input [1 : 0] s_axi_arburst
  .s_axi_arlock       (1'b0             ),    // input [0 : 0] s_axi_arlock
  .s_axi_arcache      (4'b0             ),    // input [3 : 0] s_axi_arcache
  .s_axi_arprot       (3'b0             ),    // input [2 : 0] s_axi_arprot
  .s_axi_arqos        (4'b0             ),    // input [3 : 0] s_axi_arqos
  .s_axi_aruser       (8'b0             ),    // input [7 : 0] s_axi_aruser
  .s_axi_arvalid      (s_axi2_arvalid  ),    // input s_axi_arvalid
  .s_axi_arready      (s_axi2_arready  ),    // output s_axi_arready
  .s_axi_rid          (                ),    // output [0 : 0] s_axi_rid
  .s_axi_rlast        (                ),    // output s_axi_rlast
  .s_axi_rdata        (s_axi2_rdata    ),    // output [31 : 0] s_axi_rdata
  .s_axi_rresp        (s_axi2_rresp    ),    // output [1 : 0] s_axi_rresp
  .s_axi_rvalid       (s_axi2_rvalid   ),    // output s_axi_rvalid
  .s_axi_rready       (s_axi2_rready   ),    // input s_axi_rready
  .m_axi_awid         (m_axi_awid      ),    // output [5 : 0] m_axi_awid
  .m_axi_awaddr       (m_axi_awaddr    ),    // output [31 : 0] m_axi_awaddr
  .m_axi_awlen        (m_axi_awlen     ),    // output [7 : 0] m_axi_awlen
  .m_axi_awsize       (m_axi_awsize    ),    // output [2 : 0] m_axi_awsize
  .m_axi_awburst      (m_axi_awburst   ),    // output [1 : 0] m_axi_awburst
  .m_axi_awlock       (m_axi_awlock    ),    // output [0 : 0] m_axi_awlock
  .m_axi_awcache      (m_axi_awcache   ),    // output [3 : 0] m_axi_awcache
  .m_axi_awprot       (m_axi_awprot    ),    // output [2 : 0] m_axi_awprot
  .m_axi_awqos        (m_axi_awqos     ),    // output [3 : 0] m_axi_awqos
  .m_axi_awuser       (m_axi_awuser    ),    // output [7 : 0] m_axi_awuser
  .m_axi_awvalid      (m_axi_awvalid   ),    // output m_axi_awvalid
  .m_axi_awready      (m_axi_awready   ),    // input m_axi_awready
  .m_axi_wlast        (m_axi_wlast     ),    // output m_axi_wlast
  .m_axi_wdata        (m_axi_wdata     ),    // output [511 : 0] m_axi_wdata
  .m_axi_wstrb        (m_axi_wstrb     ),    // output [63 : 0] m_axi_wstrb
  .m_axi_wvalid       (m_axi_wvalid    ),    // output m_axi_wvalid
  .m_axi_wready       (m_axi_wready    ),    // input m_axi_wready
  .m_axi_bid          (m_axi_bid       ),    // input [5 : 0] m_axi_bid
  .m_axi_bresp        (m_axi_bresp     ),    // input [1 : 0] m_axi_bresp
  .m_axi_bvalid       (m_axi_bvalid    ),    // input m_axi_bvalid
  .m_axi_bready       (m_axi_bready    ),    // output m_axi_bready
  .m_axi_arid         (m_axi_arid      ),    // output [5 : 0] m_axi_arid
  .m_axi_araddr       (m_axi_araddr    ),    // output [31 : 0] m_axi_araddr
  .m_axi_arlen        (m_axi_arlen     ),    // output [7 : 0] m_axi_arlen
  .m_axi_arsize       (m_axi_arsize    ),    // output [2 : 0] m_axi_arsize
  .m_axi_arburst      (m_axi_arburst   ),    // output [1 : 0] m_axi_arburst
  .m_axi_arlock       (m_axi_arlock    ),    // output [0 : 0] m_axi_arlock
  .m_axi_arcache      (m_axi_arcache   ),    // output [3 : 0] m_axi_arcache
  .m_axi_arprot       (m_axi_arprot    ),    // output [2 : 0] m_axi_arprot
  .m_axi_arqos        (m_axi_arqos     ),    // output [3 : 0] m_axi_arqos
  .m_axi_aruser       (m_axi_aruser    ),    // output [7 : 0] m_axi_aruser
  .m_axi_arvalid      (m_axi_arvalid   ),    // output m_axi_arvalid
  .m_axi_arready      (m_axi_arready   ),    // input m_axi_arready
  .m_axi_rid          (m_axi_rid       ),    // input [5 : 0] m_axi_rid
  .m_axi_rlast        (m_axi_rlast     ),    // input m_axi_rlast
  .m_axi_rdata        (m_axi_rdata     ),    // input [511 : 0] m_axi_rdata
  .m_axi_rresp        (m_axi_rresp     ),    // input [1 : 0] m_axi_rresp
  .m_axi_rvalid       (m_axi_rvalid    ),    // input m_axi_rvalid
  .m_axi_rready       (m_axi_rready    ),    // output m_axi_rready
  .irq_out            (                ),    // output irq_out
  .err_out            (                ),    // output err_out
  .core_ext_start     (1'b0            )     // input core_ext_start
);

axi_bram_memory axi_memory (
  .s_axi_aclk         (s_axi_aclk      ),
  .s_axi_aresetn      (s_axi_aresetn   ),
  .s_axi_awid         (m_axi_awid      ),
  .s_axi_awaddr       (m_axi_awaddr[15:0] ),
  .s_axi_awlen        (m_axi_awlen     ),
  .s_axi_awsize       (m_axi_awsize    ),
  .s_axi_awburst      (m_axi_awburst   ),
  .s_axi_awlock       (m_axi_awlock    ),
  .s_axi_awcache      (m_axi_awcache   ),
  .s_axi_awprot       (m_axi_awprot    ),
  .s_axi_awvalid      (m_axi_awvalid   ),
  .s_axi_awready      (m_axi_awready   ),
  .s_axi_wdata        (m_axi_wdata     ),
  .s_axi_wstrb        (m_axi_wstrb     ),
  .s_axi_wlast        (m_axi_wlast     ),
  .s_axi_wvalid       (m_axi_wvalid    ),
  .s_axi_wready       (m_axi_wready    ),
  .s_axi_bid          (m_axi_bid       ),
  .s_axi_bresp        (m_axi_bresp     ),
  .s_axi_bvalid       (m_axi_bvalid    ),
  .s_axi_bready       (m_axi_bready    ),
  .s_axi_arid         (m_axi_arid      ),
  .s_axi_araddr       (m_axi_araddr[15:0]),
  .s_axi_arlen        (m_axi_arlen     ),
  .s_axi_arsize       (m_axi_arsize    ),
  .s_axi_arburst      (m_axi_arburst   ),
  .s_axi_arlock       (m_axi_arlock    ),
  .s_axi_arcache      (m_axi_arcache   ),
  .s_axi_arprot       (m_axi_arprot    ),
  .s_axi_arvalid      (m_axi_arvalid   ),
  .s_axi_arready      (m_axi_arready   ),
  .s_axi_rid          (m_axi_rid       ),
  .s_axi_rdata        (m_axi_rdata     ),
  .s_axi_rresp        (m_axi_rresp     ),
  .s_axi_rlast        (m_axi_rlast     ),
  .s_axi_rvalid       (m_axi_rvalid    ),
  .s_axi_rready       (m_axi_rready    )
);

//------------------------------------------------------------------------
// Internal signal assignments
//------------------------------------------------------------------------

assign  m_axi_awid_int  = {10'b0,m_axi_awid};
assign  m_axi_wdata_int = {m_axi_wdata,m_axi_wdata};
assign  m_axi_wstrb_int = {128{1'b1}};
assign  m_axi_bid_int   = {10'b0,m_axi_bid};
assign  m_axi_arid_int  = {10'b0,m_axi_arid};
assign  m_axi_rid_int   = {10'b0,m_axi_rid};
assign  m_axi_rdata_int = {m_axi_rdata,m_axi_rdata};

<: } else { :>
   assign  s_axi2_rdata = 32'b0;
   assign  s_axi2_rresp = 2'b0;
   assign  s_axi2_rvalid = 1'b0;
   assign  s_axi2_arready = 1'b0;
   assign  s_axi2_awready = 1'b0;
   assign  s_axi2_wready = 1'b0;
   assign  s_axi2_bresp = 2'b0;
   assign  s_axi2_bvalid = 1'b0;
<: } :>

<: if { $c_slot_0_axi_protocol == "AXI4S" ||   :>
<:        $c_slot_1_axi_protocol == "AXI4S" || :>
<:        $c_slot_2_axi_protocol == "AXI4S" || :>
<:        $c_slot_3_axi_protocol == "AXI4S" || :>
<:        $c_slot_4_axi_protocol == "AXI4S" || :>
<:        $c_slot_5_axi_protocol == "AXI4S" || :>
<:        $c_slot_6_axi_protocol == "AXI4S" || :>
<:        $c_slot_7_axi_protocol == "AXI4S" } {  :>

//------------------------------------------------------------------------
// Monitor Interface instance for AXI4 Stream
//------------------------------------------------------------------------

atg_stream_source axi_stream_source_inst (
  .s_axi_aclk         (s_axi_aclk      ),    // input s_axi_aclk
  .s_axi_aresetn      (s_axi_aresetn   ),    // input s_axi_aresetn
  .s_axi_awid         (1'b0            ),    // input [0 : 0] s_axi_awid
  .s_axi_awaddr       (s_axi3_awaddr   ),    // input [31 : 0] s_axi_awaddr
  .s_axi_awlen        (8'b0             ),    // input [7 : 0] s_axi_awlen
  .s_axi_awsize       (3'b0             ),    // input [2 : 0] s_axi_awsize
  .s_axi_awburst      (2'b0             ),    // input [1 : 0] s_axi_awburst
  .s_axi_awlock       (1'b0             ),    // input [0 : 0] s_axi_awlock
  .s_axi_awcache      (4'b0             ),    // input [3 : 0] s_axi_awcache
  .s_axi_awprot       (3'b0             ),    // input [2 : 0] s_axi_awprot
  .s_axi_awqos        (4'b0             ),    // input [3 : 0] s_axi_awqos
  .s_axi_awuser       (8'b0             ),    // input [7 : 0] s_axi_awuser
  .s_axi_awvalid      (s_axi3_awvalid  ),    // input s_axi_awvalid
  .s_axi_awready      (s_axi3_awready  ),    // output s_axi_awready
  .s_axi_wlast        (1'b1             ),    // input s_axi_wlast
  .s_axi_wdata        (s_axi3_wdata    ),    // input [31 : 0] s_axi_wdata
  .s_axi_wstrb        (4'hF             ),    // input [3 : 0] s_axi_wstrb
  .s_axi_wvalid       (s_axi3_wvalid   ),    // input s_axi_wvalid
  .s_axi_wready       (s_axi3_wready   ),    // output s_axi_wready
  .s_axi_bid          (                ),    // output [0 : 0] s_axi_bid
  .s_axi_bresp        (s_axi3_bresp    ),    // output [1 : 0] s_axi_bresp
  .s_axi_bvalid       (s_axi3_bvalid   ),    // output s_axi_bvalid
  .s_axi_bready       (s_axi3_bready   ),    // input s_axi_bready
  .s_axi_arid         (1'b0            ),    // input [0 : 0] s_axi_arid
  .s_axi_araddr       (s_axi3_araddr   ),    // input [31 : 0] s_axi_araddr
  .s_axi_arlen        (8'b0            ),    // input [7 : 0] s_axi_arlen
  .s_axi_arsize       (3'b0            ),    // input [2 : 0] s_axi_arsize
  .s_axi_arburst      (2'b0            ),    // input [1 : 0] s_axi_arburst
  .s_axi_arlock       (1'b0            ),    // input [0 : 0] s_axi_arlock
  .s_axi_arcache      (4'b0            ),    // input [3 : 0] s_axi_arcache
  .s_axi_arprot       (3'b0            ),    // input [2 : 0] s_axi_arprot
  .s_axi_arqos        (4'b0            ),    // input [3 : 0] s_axi_arqos
  .s_axi_aruser       (8'b0            ),    // input [7 : 0] s_axi_aruser
  .s_axi_arvalid      (s_axi3_arvalid  ),    // input s_axi_arvalid
  .s_axi_arready      (s_axi3_arready  ),    // output s_axi_arready
  .s_axi_rid          (                ),    // output [0 : 0] s_axi_rid
  .s_axi_rlast        (                ),    // output s_axi_rlast
  .s_axi_rdata        (s_axi3_rdata    ),    // output [31 : 0] s_axi_rdata
  .s_axi_rresp        (s_axi3_rresp    ),    // output [1 : 0] s_axi_rresp
  .s_axi_rvalid       (s_axi3_rvalid   ),    // output s_axi_rvalid
  .s_axi_rready       (s_axi3_rready   ),    // input s_axi_rready
  .m_axis_1_tready    (m_axis_1_tready ),    // input m_axis_1_tready
  .m_axis_1_tvalid    (m_axis_1_tvalid ),    // output m_axis_1_tvalid
  .m_axis_1_tlast     (m_axis_1_tlast  ),    // output m_axis_1_tlast
  .m_axis_1_tdata     (m_axis_1_tdata  ),    // output [1023 : 0] m_axis_1_tdata
  .m_axis_1_tstrb     (m_axis_1_tstrb  ),    // output [127 : 0] m_axis_1_tstrb
  .m_axis_1_tkeep     (m_axis_1_tkeep  ),    // output [127 : 0] m_axis_1_tkeep
  .m_axis_1_tuser     (m_axis_1_tuser  ),    // output [255 : 0] m_axis_1_tuser
  .m_axis_1_tid       (m_axis_1_tid    ),    // output [15 : 0] m_axis_1_tid
  .m_axis_1_tdest     (m_axis_1_tdest  ),    // output [7 : 0] m_axis_1_tdest
  .core_ext_start     (1'b0            ),    // input core_ext_start
  .core_ext_stop      (1'b0            )     // input core_ext_stop
);

// AXI4 stream slave signals
assign m_axis_1_tready = 1'b1;
<: } else { :>
   assign  s_axi3_rdata = 32'b0;
   assign  s_axi3_rresp = 2'b0;
   assign  s_axi3_rvalid = 1'b0;
   assign  s_axi3_arready = 1'b0;
   assign  s_axi3_awready = 1'b0;
   assign  s_axi3_wready = 1'b0;
   assign  s_axi3_bresp = 2'b0;
   assign  s_axi3_bvalid = 1'b0;
<: } :>


<: if { $c_enable_event_log == 1 || $c_enable_trace == 1 } {  :>
     // event Log streaming interface

//------------------------------------------------------------------------
// Streaming module
//------------------------------------------------------------------------

apm_log_data 
  #(
    .C_ENABLE_ADVANCED              (<=: $c_enable_advanced :>), 
    .C_ENABLE_EVENT_LOG             (<=: $c_enable_event_log :> ), 
    .C_ENABLE_TRACE                 (<=: $c_enable_trace :> ), 
    .C_FIFO_AXIS_TDATA_WIDTH        (<=: $c_m_axis_tdata_width :> ) ,
    .C_EN_WR_ADD_FLAG               (<=: $en_wr_add_flag :> ),  
    .C_EN_FIRST_WRITE_FLAG          (<=: $en_first_write_flag :>),  
    .C_EN_LAST_WRITE_FLAG           (<=: $en_last_write_flag :>),  
    .C_EN_RESPONSE_FLAG             (<=: $en_response_flag :>),  
    .C_EN_RD_ADD_FLAG               (<=: $en_rd_add_flag :>),  
    .C_EN_FIRST_READ_FLAG           (<=: $en_first_read_flag :>),  
    .C_EN_LAST_READ_FLAG            (<=: $en_last_read_flag :>),  
    .C_SLOT_0_AXI_PROTOCOL          ("<=: $c_slot_0_axi_protocol :>")
  ) apm_log_data_inst
  (
<: if { ($c_log_data_offld == 0) } {  :>
  .m_axis_aclk                      (s_axi_aclk    ),
  .m_axis_aresetn                   (s_axi_aresetn ),
  .m_axis_tdata                     (m_axis_tdata),
  .m_axis_tvalid                    (m_axis_tvalid),
  .m_axis_tready                    (m_axis_tready),
<: } else { :>
  .s_axi_offld_aclk   (s_axi_aclk),
  .s_axi_offld_aresetn(s_axi_aresetn),
  .s_axi_offld_araddr (s_axi_offld_araddr ),
  .s_axi_offld_arvalid(s_axi_offld_arvalid),
  .s_axi_offld_arlen  (s_axi_offld_arlen  ),
<: if { ($s_axi_offld_id_width > 0) } {  :>
  .s_axi_offld_arid   (s_axi_offld_arid       ),
  .s_axi_offld_rid    (s_axi_offld_rid          ),
<: } :>
  .s_axi_offld_arready(s_axi_offld_arready),
  .s_axi_offld_rready (s_axi_offld_rready ),
  .s_axi_offld_rdata  (s_axi_offld_rdata  ),
  .s_axi_offld_rresp  (s_axi_offld_rresp  ),
  .s_axi_offld_rvalid (s_axi_offld_rvalid ),
  .s_axi_offld_rlast  (s_axi_offld_rlast ),
<: } :>
  .pass                             (log_pass) ,
  .status                           (log_status)
  );

<: } :>

//------------------------------------------------------------------------
// APM Instance
//------------------------------------------------------------------------

  <=: ComponentName :> DUT 
    (
    //AXI Lite Interface
    .s_axi_aclk            (s_axi_aclk                            ),
    <: if { $id_reflection == 1 } {  :>
    .s_axi_awid            (8'b0                                 ),
    .s_axi_arid            (8'b0                                  ),
    .s_axi_rid             (8'b0                                  ),
    .s_axi_bid             (8'b0                                  ),
    <: } :>
    .s_axi_aresetn         (s_axi_aresetn                         ),
    .s_axi_awaddr          (s_axi_awaddr[<=: c_s_axi_addr_width :> -1 :0]),
    .s_axi_awvalid         (s_axi_awvalid                         ),
    .s_axi_awready         (s_axi_awready                         ),
    .s_axi_wdata           (s_axi_wdata                           ),
    .s_axi_wstrb           (s_axi_wstrb                           ),
    .s_axi_wvalid          (s_axi_wvalid                          ),
    .s_axi_wready          (s_axi_wready                          ),
    .s_axi_bresp           (s_axi_bresp                           ),
    .s_axi_bvalid          (s_axi_bvalid                          ),
    .s_axi_bready          (s_axi_bready                          ),
    .s_axi_araddr          (s_axi_araddr[<=: c_s_axi_addr_width :> -1 :0]),
    .s_axi_arvalid         (s_axi_arvalid                         ),
    .s_axi_arready         (s_axi_arready                         ),
    .s_axi_rdata           (s_axi_rdata                           ),
    .s_axi_rresp           (s_axi_rresp                           ),
    .s_axi_rvalid          (s_axi_rvalid                          ),
    .s_axi_rready          (s_axi_rready                          ),
    <: if { $c_slot_0_axi_protocol == "AXI4" || $c_slot_0_axi_protocol == "AXI4LITE" || $c_slot_0_axi_protocol == "AXI3" } {  :>
    // SLOT_0 AXI MM
    .slot_0_axi_aclk       (s_axi_aclk                            ),
    .slot_0_axi_aresetn    (s_axi_aresetn                         ),
    <: if { $slot0_id > 0 } {  :>
    .slot_0_axi_awid       (m_axi_awid_int[<=: c_slot_0_axi_id_width :> -1 :0]),
    <: } :>
    .slot_0_axi_awaddr     (m_axi_awaddr[<=: c_slot_0_axi_addr_width :> -1 :0]),
    .slot_0_axi_awprot     (m_axi_awprot                          ),
    <: if { $c_slot_0_axi_protocol != "AXI4LITE"  } {  :>
    .slot_0_axi_awlen      (m_axi_awlen                           ),
    .slot_0_axi_awsize     (m_axi_awsize                          ),
    .slot_0_axi_awburst    (m_axi_awburst                         ),
    .slot_0_axi_awcache    (m_axi_awcache                         ),
    .slot_0_axi_awlock     (m_axi_awlock                          ),
    .slot_0_axi_wlast      (m_axi_wlast                           ),
    <: } :>
    .slot_0_axi_awvalid    (m_axi_awvalid                         ),
    .slot_0_axi_awready    (m_axi_awready                         ),
    .slot_0_axi_wdata      (m_axi_wdata_int[<=: c_slot_0_axi_data_width :> -1 :0]),
    .slot_0_axi_wstrb      (m_axi_wstrb_int[<=: c_slot_0_axi_data_width :>/8 -1 :0]),
    .slot_0_axi_wvalid     (m_axi_wvalid                          ),
    .slot_0_axi_wready     (m_axi_wready                          ),
    <: if { $slot0_id > 0 } {  :>
    .slot_0_axi_bid        (m_axi_bid_int[<=: c_slot_0_axi_id_width :> -1 :0]),
    <: } :>
    .slot_0_axi_bresp      (m_axi_bresp                           ),
    .slot_0_axi_bvalid     (m_axi_bvalid                          ),
    .slot_0_axi_bready     (m_axi_bready                          ),
    <: if { $slot0_id > 0 } {  :>
    .slot_0_axi_arid       (m_axi_arid_int[<=: c_slot_0_axi_id_width :> -1 :0]),
    <: } :>
    .slot_0_axi_araddr     (m_axi_araddr[<=: c_slot_0_axi_addr_width :> -1 :0]),
    <: if { $c_slot_0_axi_protocol != "AXI4LITE"  } {  :>
    .slot_0_axi_arlen      (m_axi_arlen                           ),
    .slot_0_axi_arsize     (m_axi_arsize                          ),
    .slot_0_axi_arburst    (m_axi_arburst                         ),
    .slot_0_axi_arcache    (m_axi_arcache                         ),
    .slot_0_axi_arlock     (m_axi_arlock                          ),
    .slot_0_axi_rlast      (m_axi_rlast                           ),
    <: } :>
    .slot_0_axi_arvalid    (m_axi_arvalid                         ),
    .slot_0_axi_arready    (m_axi_arready                         ),
    .slot_0_axi_arprot     (m_axi_arprot                          ),
    <: if { $slot0_id > 0 } {  :>
    .slot_0_axi_rid        (m_axi_rid_int[<=: c_slot_0_axi_id_width :> -1 :0]),
    <: } :>
    .slot_0_axi_rdata      (m_axi_rdata_int[<=: c_slot_0_axi_data_width :> -1 :0]),
    .slot_0_axi_rresp      (m_axi_rresp                           ),
    .slot_0_axi_rvalid     (m_axi_rvalid                          ),
    .slot_0_axi_rready     (m_axi_rready                          ),
    <: } :>
    <: if { $c_slot_0_axi_protocol == "AXI4S" } {  :>
    //slot_0 axi streaming Interface
    .slot_0_axis_aclk      (s_axi_aclk                      ),
    .slot_0_axis_aresetn   (s_axi_aresetn                         ),
    .slot_0_axis_tvalid    (m_axis_1_tvalid                       ),
    .slot_0_axis_tready    (m_axis_1_tready                       ),
    .slot_0_axis_tdata     (m_axis_1_tdata[<=: c_slot_0_axis_tdata_width :> -1 :0]),
    .slot_0_axis_tstrb     (m_axis_1_tstrb[<=: c_slot_0_axis_tdata_width :>/8 -1 :0]),
    .slot_0_axis_tkeep     (m_axis_1_tkeep[<=: c_slot_0_axis_tdata_width :>/8 -1 :0]),
    .slot_0_axis_tlast     (m_axis_1_tlast                         ),
    <: if { $slot0_tid > 0 } {  :>
    .slot_0_axis_tid       (m_axis_1_tid[<=: c_slot_0_axis_tid_width :> -1 :0]),
    <: } :>
    <: if { $slot0_tdest > 0 } {  :>
    .slot_0_axis_tdest     (m_axis_1_tdest[<=: c_slot_0_axis_tdest_width :> -1 :0]),
    <: } :>
    <: if { $slot0_tuser > 0 } {  :>
    .slot_0_axis_tuser     (m_axis_1_tuser[<=: c_slot_0_axis_tuser_width :> -1 :0]),
    <: } :>
    <: } :>
    <: if { $c_num_of_mon_slots > 1 && ( $c_slot_1_axi_protocol == "AXI4" || $c_slot_1_axi_protocol == "AXI4LITE" || $c_slot_1_axi_protocol == "AXI3" ) } {  :>
    // slot_1 axi4 
    .slot_1_axi_aclk       (s_axi_aclk                       ),
    .slot_1_axi_aresetn    (s_axi_aresetn                         ),
    <: if { $slot1_id > 0 } {  :>
    .slot_1_axi_awid       (m_axi_awid_int[<=: c_slot_1_axi_id_width :> -1 :0]),
    <: } :>
    .slot_1_axi_awaddr     (m_axi_awaddr[<=: c_slot_1_axi_addr_width :> -1 :0]),
    .slot_1_axi_awprot     (m_axi_awprot                          ),
    <: if { $c_slot_1_axi_protocol != "AXI4LITE"  } {  :>
    .slot_1_axi_awlen      (m_axi_awlen                           ),
    .slot_1_axi_awsize     (m_axi_awsize                          ),
    .slot_1_axi_awburst    (m_axi_awburst                         ),
    .slot_1_axi_awcache    (m_axi_awcache                         ),
    .slot_1_axi_awlock     (m_axi_awlock                          ),
    .slot_1_axi_wlast      (m_axi_wlast                           ),
    <: } :>
    .slot_1_axi_awvalid    (m_axi_awvalid                         ),
    .slot_1_axi_awready    (m_axi_awready                         ),
    .slot_1_axi_wdata      (m_axi_wdata_int[<=: c_slot_1_axi_data_width :> -1 :0]),
    .slot_1_axi_wstrb      (m_axi_wstrb_int[<=: c_slot_1_axi_data_width :>/8 -1 :0]),
    .slot_1_axi_wvalid     (m_axi_wvalid                          ),
    .slot_1_axi_wready     (m_axi_wready                          ),
    <: if { $slot1_id > 0 } {  :>
    .slot_1_axi_bid        (m_axi_bid_int[<=: c_slot_1_axi_id_width :> -1 :0]),
    <: } :>
    .slot_1_axi_bresp      (m_axi_bresp                           ),
    .slot_1_axi_bvalid     (m_axi_bvalid                          ),
    .slot_1_axi_bready     (m_axi_bready                          ),
    <: if { $slot1_id > 0 } {  :>
    .slot_1_axi_arid       (m_axi_arid_int[<=: c_slot_1_axi_id_width :> -1 :0]),
    <: } :>
    .slot_1_axi_araddr     (m_axi_araddr[<=: c_slot_1_axi_addr_width :> -1 :0]),
    <: if { $c_slot_1_axi_protocol != "AXI4LITE"  } {  :>
    .slot_1_axi_arlen      (m_axi_arlen                           ),
    .slot_1_axi_arsize     (m_axi_arsize                          ),
    .slot_1_axi_arburst    (m_axi_arburst                         ),
    .slot_1_axi_arcache    (m_axi_arcache                         ),
    .slot_1_axi_arprot     (m_axi_arprot                          ),
    .slot_1_axi_arlock     (m_axi_arlock                          ),
    .slot_1_axi_rlast      (m_axi_rlast                           ),
    <: } :>
    .slot_1_axi_arvalid    (m_axi_arvalid                         ),
    .slot_1_axi_arready    (m_axi_arready                         ),
    <: if { $slot1_id > 0 } {  :>
    .slot_1_axi_rid        (m_axi_rid_int[<=: c_slot_1_axi_id_width :> -1 :0]),
    <: } :>
    .slot_1_axi_rdata      (m_axi_rdata_int[<=: c_slot_1_axi_data_width :> -1 :0]),
    .slot_1_axi_rresp      (m_axi_rresp                           ),
    .slot_1_axi_rvalid     (m_axi_rvalid                          ),
    .slot_1_axi_rready     (m_axi_rready                          ),
    <: } :>
    <: if { $c_num_of_mon_slots > 1 && $c_slot_1_axi_protocol == "AXI4S" } {  :>
    //slot_1 axi streaming Interface
    .slot_1_axis_aclk      (s_axi_aclk                      ),
    .slot_1_axis_aresetn   (s_axi_aresetn                         ),
    .slot_1_axis_tvalid    (m_axis_1_tvalid                       ),
    .slot_1_axis_tready    (m_axis_1_tready                       ),
    .slot_1_axis_tdata     (m_axis_1_tdata[<=: c_slot_1_axis_tdata_width :> -1 :0]),
    .slot_1_axis_tstrb     (m_axis_1_tstrb[<=: c_slot_1_axis_tdata_width :>/8 -1 :0]),
    .slot_1_axis_tkeep     (m_axis_1_tkeep[<=: c_slot_1_axis_tdata_width :>/8 -1 :0]),
    .slot_1_axis_tlast     (m_axis_1_tlast                        ),
    <: if { $slot1_tid > 0 } {  :>
    .slot_1_axis_tid       (m_axis_1_tid[<=: c_slot_1_axis_tid_width :> -1 :0]),
    <: } :>
    <: if { $slot1_tdest > 0 } {  :>
    .slot_1_axis_tdest     (m_axis_1_tdest[<=: c_slot_1_axis_tdest_width :> -1 :0]),
    <: } :>
    <: if { $slot1_tuser > 0 } {  :>
    .slot_1_axis_tuser     (m_axis_1_tuser[<=: c_slot_1_axis_tuser_width :> -1 :0]),
    <: } :>
    <: } :>
    <: if { $c_num_of_mon_slots > 2 && ( $c_slot_2_axi_protocol == "AXI4" || $c_slot_2_axi_protocol == "AXI4LITE" || $c_slot_2_axi_protocol == "AXI3" ) } {  :>
    // slot_2 axi mm 
    .slot_2_axi_aclk       (s_axi_aclk                       ),
    .slot_2_axi_aresetn    (s_axi_aresetn                         ),
    <: if { $slot2_id > 0 } {  :>
    .slot_2_axi_awid       (m_axi_awid_int[<=: c_slot_2_axi_id_width :> -1 :0]),
     <: } :>
    .slot_2_axi_awaddr     (m_axi_awaddr[<=: c_slot_2_axi_addr_width :> -1 :0]),
    .slot_2_axi_awprot     (m_axi_awprot                          ),
    <: if { $c_slot_2_axi_protocol != "AXI4LITE"  } {  :>
    .slot_2_axi_awlen      (m_axi_awlen                           ),
    .slot_2_axi_awsize     (m_axi_awsize                          ),
    .slot_2_axi_awburst    (m_axi_awburst                         ),
    .slot_2_axi_awcache    (m_axi_awcache                         ),
    .slot_2_axi_awlock     (m_axi_awlock                          ),
    .slot_2_axi_wlast      (m_axi_wlast                           ),
     <: } :>
    .slot_2_axi_awvalid    (m_axi_awvalid                         ),
    .slot_2_axi_awready    (m_axi_awready                         ),
    .slot_2_axi_wdata      (m_axi_wdata_int[<=: c_slot_2_axi_data_width :> -1 :0]),
    .slot_2_axi_wstrb      (m_axi_wstrb_int[<=: c_slot_2_axi_data_width :>/8 -1 :0]),
    .slot_2_axi_wvalid     (m_axi_wvalid                          ),
    .slot_2_axi_wready     (m_axi_wready                          ),
    <: if { $slot2_id > 0 } {  :>
    .slot_2_axi_bid        (m_axi_bid_int[<=: c_slot_2_axi_id_width :> -1 :0]),
    <: } :>
    .slot_2_axi_bresp      (m_axi_bresp                           ),
    .slot_2_axi_bvalid     (m_axi_bvalid                          ),
    .slot_2_axi_bready     (m_axi_bready                          ),
    <: if { $slot2_id > 0 } {  :>
    .slot_2_axi_arid       (m_axi_arid_int[<=: c_slot_2_axi_id_width :> -1 :0]),
    <: } :>
    .slot_2_axi_araddr     (m_axi_araddr[<=: c_slot_2_axi_addr_width :> -1 :0]),
    <: if { $c_slot_2_axi_protocol != "AXI4LITE"  } {  :>
    .slot_2_axi_arlen      (m_axi_arlen                           ),
    .slot_2_axi_arsize     (m_axi_arsize                          ),
    .slot_2_axi_arburst    (m_axi_arburst                         ),
    .slot_2_axi_arcache    (m_axi_arcache                         ),
    .slot_2_axi_arprot     (m_axi_arprot                          ),
    .slot_2_axi_arlock     (m_axi_arlock                          ),
    .slot_2_axi_rlast      (m_axi_rlast                           ),
    <: } :>
    .slot_2_axi_arvalid    (m_axi_arvalid                         ),
    .slot_2_axi_arready    (m_axi_arready                         ),
    <: if { $slot2_id > 0 } {  :>
    .slot_2_axi_rid        (m_axi_rid_int[<=: c_slot_2_axi_id_width :> -1 :0]),
    <: } :>
    .slot_2_axi_rdata      (m_axi_rdata_int[<=: c_slot_2_axi_data_width :> -1 :0]),
    .slot_2_axi_rresp      (m_axi_rresp                           ),
    .slot_2_axi_rvalid     (m_axi_rvalid                          ),
    .slot_2_axi_rready     (m_axi_rready                          ),
    <: } :>
    <: if { $c_num_of_mon_slots > 2 && $c_slot_2_axi_protocol == "AXI4S" } {  :>
    //slot_2 axi sTREAMing Interface
    .slot_2_axis_aclk      (s_axi_aclk                      ),
    .slot_2_axis_aresetn   (s_axi_aresetn                         ),
    .slot_2_axis_tvalid    (m_axis_1_tvalid                       ),
    .slot_2_axis_tready    (m_axis_1_tready                       ),
    .slot_2_axis_tdata     (m_axis_1_tdata[<=: c_slot_2_axis_tdata_width :> -1 :0]),
    .slot_2_axis_tstrb     (m_axis_1_tstrb[<=: c_slot_2_axis_tdata_width :>/8 -1 :0]),
    .slot_2_axis_tkeep     (m_axis_1_tkeep[<=: c_slot_2_axis_tdata_width :>/8 -1 :0]),
    .slot_2_axis_tlast     (m_axis_1_tlast                        ),
    <: if { $slot2_tid > 0 } {  :>
    .slot_2_axis_tid       (m_axis_1_tid[<=: c_slot_2_axis_tid_width :> -1 :0]),
    <: } :>
    <: if { $slot2_tdest > 0 } {  :>
    .slot_2_axis_tdest     (m_axis_1_tdest[<=: c_slot_2_axis_tdest_width :> -1 :0]),
    <: } :>
    <: if { $slot2_tuser > 0 } {  :>
    .slot_2_axis_tuser     (m_axis_1_tuser[<=: c_slot_2_axis_tuser_width :> -1 :0]),
    <: } :>
    <: } :>
    <: if { $c_num_of_mon_slots > 3 && ( $c_slot_3_axi_protocol == "AXI4" || $c_slot_3_axi_protocol == "AXI4LITE" || $c_slot_3_axi_protocol == "AXI3" ) } {  :>
    // slot_3 axi mm iNTERFa
    .slot_3_axi_aclk       (s_axi_aclk                       ),
    .slot_3_axi_aresetn    (s_axi_aresetn                         ),
    <: if { $slot3_id > 0 } {  :>
    .slot_3_axi_awid       (m_axi_awid_int[<=: c_slot_3_axi_id_width :> -1 :0]),
     <: } :>
    .slot_3_axi_awaddr     (m_axi_awaddr[<=: c_slot_3_axi_addr_width :> -1 :0]),
    .slot_3_axi_awprot     (m_axi_awprot                          ),
    <: if { $c_slot_3_axi_protocol != "AXI4LITE"  } {  :>
    .slot_3_axi_awlen      (m_axi_awlen                           ),
    .slot_3_axi_awsize     (m_axi_awsize                          ),
    .slot_3_axi_awburst    (m_axi_awburst                         ),
    .slot_3_axi_awcache    (m_axi_awcache                         ),
    .slot_3_axi_awlock     (m_axi_awlock                          ),
    .slot_3_axi_wlast      (m_axi_wlast                           ),
     <: } :>
    .slot_3_axi_awvalid    (m_axi_awvalid                         ),
    .slot_3_axi_awready    (m_axi_awready                         ),
    .slot_3_axi_wdata      (m_axi_wdata_int[<=: c_slot_3_axi_data_width :> -1 :0]),
    .slot_3_axi_wstrb      (m_axi_wstrb_int[<=: c_slot_3_axi_data_width :>/8 -1 :0]),
    .slot_3_axi_wvalid     (m_axi_wvalid                          ),
    .slot_3_axi_wready     (m_axi_wready                          ),
    <: if { $slot3_id > 0 } {  :>
    .slot_3_axi_bid        (m_axi_bid_int[<=: c_slot_3_axi_id_width :> -1 :0]),
     <: } :>
    .slot_3_axi_bresp      (m_axi_bresp                           ),
    .slot_3_axi_bvalid     (m_axi_bvalid                          ),
    .slot_3_axi_bready     (m_axi_bready                          ),
    <: if { $slot3_id > 0 } {  :>
    .slot_3_axi_arid       (m_axi_arid_int[<=: c_slot_3_axi_id_width :> -1 :0]),
     <: } :>
    .slot_3_axi_araddr     (m_axi_araddr[<=: c_slot_3_axi_addr_width :> -1 :0]),
    <: if { $c_slot_3_axi_protocol != "AXI4LITE"  } {  :>
    .slot_3_axi_arlen      (m_axi_arlen                           ),
    .slot_3_axi_arsize     (m_axi_arsize                          ),
    .slot_3_axi_arburst    (m_axi_arburst                         ),
    .slot_3_axi_arcache    (m_axi_arcache                         ),
    .slot_3_axi_arprot     (m_axi_arprot                          ),
    .slot_3_axi_arlock     (m_axi_arlock                          ),
    .slot_3_axi_rlast      (m_axi_rlast                           ),
     <: } :>
    .slot_3_axi_arvalid    (m_axi_arvalid                         ),
    .slot_3_axi_arready    (m_axi_arready                         ),
    <: if { $slot3_id > 0 } {  :>
    .slot_3_axi_rid        (m_axi_rid_int[<=: c_slot_3_axi_id_width :> -1 :0]),
     <: } :>
    .slot_3_axi_rdata      (m_axi_rdata_int[<=: c_slot_3_axi_data_width :> -1 :0]),
    .slot_3_axi_rresp      (m_axi_rresp                           ),
    .slot_3_axi_rvalid     (m_axi_rvalid                          ),
    .slot_3_axi_rready     (m_axi_rready                          ),
    <: } :>
    <: if { $c_num_of_mon_slots > 3 && $c_slot_3_axi_protocol == "AXI4S" } {  :>
    //slot_3 axi streaming Interface
    .slot_3_axis_aclk      (s_axi_aclk                      ),
    .slot_3_axis_aresetn   (s_axi_aresetn                         ),
    .slot_3_axis_tvalid    (m_axis_1_tvalid                       ),
    .slot_3_axis_tready    (m_axis_1_tready                       ),
    .slot_3_axis_tdata     (m_axis_1_tdata[<=: c_slot_3_axis_tdata_width :> -1 :0]),
    .slot_3_axis_tstrb     (m_axis_1_tstrb[<=: c_slot_3_axis_tdata_width :>/8 -1 :0]),
    .slot_3_axis_tkeep     (m_axis_1_tkeep[<=: c_slot_3_axis_tdata_width :>/8 -1 :0]),
    .slot_3_axis_tlast     (m_axis_1_tlast                        ),
    <: if { $slot3_tid > 0 } {  :>
    .slot_3_axis_tid       (m_axis_1_tid[<=: c_slot_3_axis_tid_width :> -1 :0]),
    <: } :>
    <: if { $slot3_tdest > 0 } {  :>
    .slot_3_axis_tdest     (m_axis_1_tdest[<=: c_slot_3_axis_tdest_width :> -1 :0]),
    <: } :>
    <: if { $slot3_tuser > 0 } {  :>
    .slot_3_axis_tuser     (m_axis_1_tuser[<=: c_slot_3_axis_tuser_width :> -1 :0]),
    <: } :>
    <: } :>
    <: if { $c_num_of_mon_slots > 4 && ( $c_slot_4_axi_protocol == "AXI4" || $c_slot_4_axi_protocol == "AXI4LITE" || $c_slot_4_axi_protocol == "AXI3" ) } {  :>
    // slot_4 axi mm 
    .slot_4_axi_aclk       (s_axi_aclk                       ),
    .slot_4_axi_aresetn    (s_axi_aresetn                         ),
    <: if { $slot4_id > 0 } {  :>
    .slot_4_axi_awid       (m_axi_awid_int[<=: c_slot_4_axi_id_width :> -1 :0]),
     <: } :>
    .slot_4_axi_awaddr     (m_axi_awaddr[<=: c_slot_4_axi_addr_width :> -1 :0]),
    .slot_4_axi_awprot     (m_axi_awprot                          ),
    <: if { $c_slot_4_axi_protocol != "AXI4LITE"  } {  :>
    .slot_4_axi_awlen      (m_axi_awlen                           ),
    .slot_4_axi_awsize     (m_axi_awsize                          ),
    .slot_4_axi_awburst    (m_axi_awburst                         ),
    .slot_4_axi_awcache    (m_axi_awcache                         ),
    .slot_4_axi_awlock     (m_axi_awlock                          ),
    .slot_4_axi_wlast      (m_axi_wlast                           ),
     <: } :>
    .slot_4_axi_awvalid    (m_axi_awvalid                         ),
    .slot_4_axi_awready    (m_axi_awready                         ),
    .slot_4_axi_wdata      (m_axi_wdata_int[<=: c_slot_4_axi_data_width :> -1 :0]),
    .slot_4_axi_wstrb      (m_axi_wstrb_int[<=: c_slot_4_axi_data_width :>/8 -1 :0]),
    .slot_4_axi_wvalid     (m_axi_wvalid                          ),
    .slot_4_axi_wready     (m_axi_wready                          ),
    <: if { $slot4_id > 0 } {  :>
    .slot_4_axi_bid        (m_axi_bid_int[<=: c_slot_4_axi_id_width :> -1 :0]),
     <: } :>
    .slot_4_axi_bresp      (m_axi_bresp                           ),
    .slot_4_axi_bvalid     (m_axi_bvalid                          ),
    .slot_4_axi_bready     (m_axi_bready                          ),
    <: if { $slot4_id > 0 } {  :>
    .slot_4_axi_arid       (m_axi_arid_int[<=: c_slot_4_axi_id_width :> -1 :0]),
     <: } :>
    .slot_4_axi_araddr     (m_axi_araddr[<=: c_slot_4_axi_addr_width :> -1 :0]),
    <: if { $c_slot_4_axi_protocol != "AXI4LITE"  } {  :>
    .slot_4_axi_arlen      (m_axi_arlen                           ),
    .slot_4_axi_arsize     (m_axi_arsize                          ),
    .slot_4_axi_arburst    (m_axi_arburst                         ),
    .slot_4_axi_arcache    (m_axi_arcache                         ),
    .slot_4_axi_arprot     (m_axi_arprot                          ),
    .slot_4_axi_arlock     (m_axi_arlock                          ),
    .slot_4_axi_rlast      (m_axi_rlast                           ),
     <: } :>
    .slot_4_axi_arvalid    (m_axi_arvalid                         ),
    .slot_4_axi_arready    (m_axi_arready                         ),
    <: if { $slot4_id > 0 } {  :>
    .slot_4_axi_rid        (m_axi_rid_int[<=: c_slot_4_axi_id_width :> -1 :0]),
     <: } :>
    .slot_4_axi_rdata      (m_axi_rdata_int[<=: c_slot_4_axi_data_width :> -1 :0]),
    .slot_4_axi_rresp      (m_axi_rresp                           ),
    .slot_4_axi_rvalid     (m_axi_rvalid                          ),
    .slot_4_axi_rready     (m_axi_rready                          ),
    <: } :>
    <: if { $c_num_of_mon_slots > 4 && $c_slot_4_axi_protocol == "AXI4S" } {  :>
    //slot_4 axi sTREAMing Interface
    .slot_4_axis_aclk      (s_axi_aclk                      ),
    .slot_4_axis_aresetn   (s_axi_aresetn                         ),
    .slot_4_axis_tvalid    (m_axis_1_tvalid                       ),
    .slot_4_axis_tready    (m_axis_1_tready                       ),
    .slot_4_axis_tdata     (m_axis_1_tdata[<=: c_slot_4_axis_tdata_width :> -1 :0]),
    .slot_4_axis_tstrb     (m_axis_1_tstrb[<=: c_slot_4_axis_tdata_width :>/8 -1 :0]),
    .slot_4_axis_tkeep     (m_axis_1_tkeep[<=: c_slot_4_axis_tdata_width :>/8 -1 :0]),
    .slot_4_axis_tlast     (m_axis_1_tlast                        ),
    <: if { $slot4_tid > 0 } {  :>
    .slot_4_axis_tid       (m_axis_1_tid[<=: c_slot_4_axis_tid_width :> -1 :0]),
    <: } :>
    <: if { $slot4_tdest > 0 } {  :>
    .slot_4_axis_tdest     (m_axis_1_tdest[<=: c_slot_4_axis_tdest_width :> -1 :0]),
    <: } :>
    <: if { $slot4_tuser > 0 } {  :>
    .slot_4_axis_tuser     (m_axis_1_tuser[<=: c_slot_4_axis_tuser_width :> -1 :0]),
    <: } :>
    <: } :>
    <: if { $c_num_of_mon_slots > 5 && ($c_slot_5_axi_protocol == "AXI4" || $c_slot_5_axi_protocol == "AXI4LITE" || $c_slot_5_axi_protocol == "AXI3")} {  :>
    //slot_4 axi sTREAMing Interface
    // slot_5 axi mm 
    .slot_5_axi_aclk       (s_axi_aclk                       ),
    .slot_5_axi_aresetn    (s_axi_aresetn                         ),
    <: if { $slot5_id > 0 } {  :>
    .slot_5_axi_awid       (m_axi_awid_int[<=: c_slot_5_axi_id_width :> -1 :0]),
     <: } :>
    .slot_5_axi_awaddr     (m_axi_awaddr[<=: c_slot_5_axi_addr_width :> -1 :0]),
    .slot_5_axi_awprot     (m_axi_awprot                          ),
    <: if { $c_slot_5_axi_protocol != "AXI4LITE"  } {  :>
    .slot_5_axi_awlen      (m_axi_awlen                           ),
    .slot_5_axi_awsize     (m_axi_awsize                          ),
    .slot_5_axi_awburst    (m_axi_awburst                         ),
    .slot_5_axi_awcache    (m_axi_awcache                         ),
    .slot_5_axi_awlock     (m_axi_awlock                          ),
    .slot_5_axi_wlast      (m_axi_wlast                           ),
     <: } :>
    .slot_5_axi_awvalid    (m_axi_awvalid                         ),
    .slot_5_axi_awready    (m_axi_awready                         ),
    .slot_5_axi_wdata      (m_axi_wdata_int[<=: c_slot_5_axi_data_width :> -1 :0]),
    .slot_5_axi_wstrb      (m_axi_wstrb_int[<=: c_slot_5_axi_data_width :>/8 -1 :0]),
    .slot_5_axi_wvalid     (m_axi_wvalid                          ),
    .slot_5_axi_wready     (m_axi_wready                          ),
    <: if { $slot5_id > 0 } {  :>
    .slot_5_axi_bid        (m_axi_bid_int[<=: c_slot_5_axi_id_width :> -1 :0]),
     <: } :>
    .slot_5_axi_bresp      (m_axi_bresp                           ),
    .slot_5_axi_bvalid     (m_axi_bvalid                          ),
    .slot_5_axi_bready     (m_axi_bready                          ),
    <: if { $slot5_id > 0 } {  :>
    .slot_5_axi_arid       (m_axi_arid_int[<=: c_slot_5_axi_id_width :> -1 :0]),
     <: } :>
    .slot_5_axi_araddr     (m_axi_araddr[<=: c_slot_5_axi_addr_width :> -1 :0]),
    <: if { $c_slot_5_axi_protocol != "AXI4LITE"  } {  :>
    .slot_5_axi_arlen      (m_axi_arlen                           ),
    .slot_5_axi_arsize     (m_axi_arsize                          ),
    .slot_5_axi_arburst    (m_axi_arburst                         ),
    .slot_5_axi_arcache    (m_axi_arcache                         ),
    .slot_5_axi_arprot     (m_axi_arprot                          ),
    .slot_5_axi_arlock     (m_axi_arlock                          ),
    .slot_5_axi_rlast      (m_axi_rlast                           ),
     <: } :>
    .slot_5_axi_arvalid    (m_axi_arvalid                         ),
    .slot_5_axi_arready    (m_axi_arready                         ),
    <: if { $slot5_id > 0 } {  :>
    .slot_5_axi_rid        (m_axi_rid_int[<=: c_slot_5_axi_id_width :> -1 :0]),
     <: } :>
    .slot_5_axi_rdata      (m_axi_rdata_int[<=: c_slot_5_axi_data_width :> -1 :0]),
    .slot_5_axi_rresp      (m_axi_rresp                           ),
    .slot_5_axi_rvalid     (m_axi_rvalid                          ),
    .slot_5_axi_rready     (m_axi_rready                          ),
    <: } :>
    <: if { $c_num_of_mon_slots > 5 && $c_slot_5_axi_protocol == "AXI4S" } {  :>
    //slot_5 axi streaming Interface
    .slot_5_axis_aclk      (s_axi_aclk                      ),
    .slot_5_axis_aresetn   (s_axi_aresetn                         ),
    .slot_5_axis_tvalid    (m_axis_1_tvalid                       ),
    .slot_5_axis_tready    (m_axis_1_tready                       ),
    .slot_5_axis_tdata     (m_axis_1_tdata[<=: c_slot_5_axis_tdata_width :> -1 :0]),
    .slot_5_axis_tstrb     (m_axis_1_tstrb[<=: c_slot_5_axis_tdata_width :>/8 -1 :0]),
    .slot_5_axis_tkeep     (m_axis_1_tkeep[<=: c_slot_5_axis_tdata_width :>/8 -1 :0]),
    .slot_5_axis_tlast     (m_axis_1_tlast                        ),
    <: if { $slot5_tid > 0 } {  :>
    .slot_5_axis_tid       (m_axis_1_tid[<=: c_slot_5_axis_tid_width :> -1 :0]),
    <: } :>
    <: if { $slot5_tdest > 0 } {  :>
    .slot_5_axis_tdest     (m_axis_1_tdest[<=: c_slot_5_axis_tdest_width :> -1 :0]),
    <: } :>
    <: if { $slot5_tuser > 0 } {  :>
    .slot_5_axis_tuser     (m_axis_1_tuser[<=: c_slot_5_axis_tuser_width :> -1 :0]),
    <: } :>
    <: } :>
    <: if { $c_num_of_mon_slots > 6 && ($c_slot_6_axi_protocol == "AXI4" || $c_slot_6_axi_protocol == "AXI4LITE" || $c_slot_6_axi_protocol == "AXI3") } {  :>
    // slot_6 axi mm 
    .slot_6_axi_aclk       (s_axi_aclk                       ),
    .slot_6_axi_aresetn    (s_axi_aresetn                         ),
    <: if { $slot6_id > 0 } {  :>
    .slot_6_axi_awid       (m_axi_awid_int[<=: c_slot_6_axi_id_width :> -1 :0]),
     <: } :>
    .slot_6_axi_awaddr     (m_axi_awaddr[<=: c_slot_6_axi_addr_width :> -1 :0]),
    .slot_6_axi_awprot     (m_axi_awprot                          ),
    <: if { $c_slot_6_axi_protocol != "AXI4LITE"  } {  :>
    .slot_6_axi_awlen      (m_axi_awlen                           ),
    .slot_6_axi_awsize     (m_axi_awsize                          ),
    .slot_6_axi_awburst    (m_axi_awburst                         ),
    .slot_6_axi_awcache    (m_axi_awcache                         ),
    .slot_6_axi_awlock     (m_axi_awlock                          ),
    .slot_6_axi_wlast      (m_axi_wlast                           ),
     <: } :>
    .slot_6_axi_awvalid    (m_axi_awvalid                         ),
    .slot_6_axi_awready    (m_axi_awready                         ),
    .slot_6_axi_wdata      (m_axi_wdata_int[<=: c_slot_6_axi_data_width :> -1 :0]),
    .slot_6_axi_wstrb      (m_axi_wstrb_int[<=: c_slot_6_axi_data_width :>/8 -1 :0]),
    .slot_6_axi_wvalid     (m_axi_wvalid                          ),
    .slot_6_axi_wready     (m_axi_wready                          ),
    <: if { $slot6_id > 0 } {  :>
    .slot_6_axi_bid        (m_axi_bid_int[<=: c_slot_6_axi_id_width :> -1 :0]),
     <: } :>
    .slot_6_axi_bresp      (m_axi_bresp                           ),
    .slot_6_axi_bvalid     (m_axi_bvalid                          ),
    .slot_6_axi_bready     (m_axi_bready                          ),
    <: if { $slot6_id > 0 } {  :>
    .slot_6_axi_arid       (m_axi_arid_int[<=: c_slot_6_axi_id_width :> -1 :0]),
     <: } :>
    .slot_6_axi_araddr     (m_axi_araddr[<=: c_slot_6_axi_addr_width :> -1 :0]),
    <: if { $c_slot_6_axi_protocol != "AXI4LITE"  } {  :>
    .slot_6_axi_arlen      (m_axi_arlen                           ),
    .slot_6_axi_arsize     (m_axi_arsize                          ),
    .slot_6_axi_arburst    (m_axi_arburst                         ),
    .slot_6_axi_arcache    (m_axi_arcache                         ),
    .slot_6_axi_arprot     (m_axi_arprot                          ),
    .slot_6_axi_arlock     (m_axi_arlock                          ),
    .slot_6_axi_rlast      (m_axi_rlast                           ),
     <: } :>
    .slot_6_axi_arvalid    (m_axi_arvalid                         ),
    .slot_6_axi_arready    (m_axi_arready                         ),
    <: if { $slot6_id > 0 } {  :>
    .slot_6_axi_rid        (m_axi_rid_int[<=: c_slot_6_axi_id_width :> -1 :0]),
     <: } :>
    .slot_6_axi_rdata      (m_axi_rdata_int[<=: c_slot_6_axi_data_width :> -1 :0]),
    .slot_6_axi_rresp      (m_axi_rresp                           ),
    .slot_6_axi_rvalid     (m_axi_rvalid                          ),
    .slot_6_axi_rready     (m_axi_rready                          ),
    <: } :>
    <: if { $c_num_of_mon_slots > 6 && $c_slot_6_axi_protocol == "AXI4S" } {  :>
    //slot_6 axi streaming Interface
    .slot_6_axis_aclk      (s_axi_aclk                      ),
    .slot_6_axis_aresetn   (s_axi_aresetn                         ),
    .slot_6_axis_tvalid    (m_axis_1_tvalid                       ),
    .slot_6_axis_tready    (m_axis_1_tready                       ),
    .slot_6_axis_tdata     (m_axis_1_tdata[<=: c_slot_6_axis_tdata_width :> -1 :0]),
    .slot_6_axis_tstrb     (m_axis_1_tstrb[<=: c_slot_6_axis_tdata_width :>/8 -1 :0]),
    .slot_6_axis_tkeep     (m_axis_1_tkeep[<=: c_slot_6_axis_tdata_width :>/8 -1 :0]),
    .slot_6_axis_tlast     (m_axis_1_tlast                        ),
    <: if { $slot6_tid > 0 } {  :>
    .slot_6_axis_tid       (m_axis_1_tid[<=: c_slot_6_axis_tid_width :> -1 :0]),
    <: } :>
    <: if { $slot6_tdest > 0 } {  :>
    .slot_6_axis_tdest     (m_axis_1_tdest[<=: c_slot_6_axis_tdest_width :> -1 :0]),
    <: } :>
    <: if { $slot6_tuser > 0 } {  :>
    .slot_6_axis_tuser     (m_axis_1_tuser[<=: c_slot_6_axis_tuser_width :> -1 :0]),
    <: } :>
    <: } :>
    <: if { $c_num_of_mon_slots > 7 && ( $c_slot_7_axi_protocol == "AXI4" || $c_slot_7_axi_protocol == "AXI4LITE" || $c_slot_7_axi_protocol == "AXI3" ) } {  :>
    // slot_7 axi mm 
    .slot_7_axi_aclk       (s_axi_aclk                       ),
    .slot_7_axi_aresetn    (s_axi_aresetn                         ),
    <: if { $slot7_id > 0 } {  :>
    .slot_7_axi_awid       (m_axi_awid_int[<=: c_slot_7_axi_id_width :> -1 :0]),
     <: } :>
    .slot_7_axi_awaddr     (m_axi_awaddr[<=: c_slot_7_axi_addr_width :> -1 :0]),
    .slot_7_axi_awprot     (m_axi_awprot                          ),
    <: if { $c_slot_7_axi_protocol != "AXI4LITE"  } {  :>
    .slot_7_axi_awlen      (m_axi_awlen                           ),
    .slot_7_axi_awsize     (m_axi_awsize                          ),
    .slot_7_axi_awburst    (m_axi_awburst                         ),
    .slot_7_axi_awcache    (m_axi_awcache                         ),
    .slot_7_axi_awlock     (m_axi_awlock                          ),
    .slot_7_axi_wlast      (m_axi_wlast                           ),
     <: } :>
    .slot_7_axi_awvalid    (m_axi_awvalid                         ),
    .slot_7_axi_awready    (m_axi_awready                         ),
    .slot_7_axi_wdata      (m_axi_wdata_int[<=: c_slot_7_axi_data_width :> -1 :0]),
    .slot_7_axi_wstrb      (m_axi_wstrb_int[<=: c_slot_7_axi_data_width :>/8 -1 :0]),
    .slot_7_axi_wvalid     (m_axi_wvalid                          ),
    .slot_7_axi_wready     (m_axi_wready                          ),
    <: if { $slot7_id > 0 } {  :>
    .slot_7_axi_bid        (m_axi_bid_int[<=: c_slot_7_axi_id_width :> -1 :0]),
     <: } :>
    .slot_7_axi_bresp      (m_axi_bresp                           ),
    .slot_7_axi_bvalid     (m_axi_bvalid                          ),
    .slot_7_axi_bready     (m_axi_bready                          ),
    <: if { $slot7_id > 0 } {  :>
    .slot_7_axi_arid       (m_axi_arid_int[<=: c_slot_7_axi_id_width :> -1 :0]),
     <: } :>
    .slot_7_axi_araddr     (m_axi_araddr[<=: c_slot_7_axi_addr_width :> -1 :0]),
    <: if { $c_slot_7_axi_protocol != "AXI4LITE"  } {  :>
    .slot_7_axi_arlen      (m_axi_arlen                           ),
    .slot_7_axi_arsize     (m_axi_arsize                          ),
    .slot_7_axi_arburst    (m_axi_arburst                         ),
    .slot_7_axi_arcache    (m_axi_arcache                         ),
    .slot_7_axi_arprot     (m_axi_arprot                          ),
    .slot_7_axi_arlock     (m_axi_arlock                          ),
    .slot_7_axi_rlast      (m_axi_rlast                           ),
     <: } :>
    .slot_7_axi_arvalid    (m_axi_arvalid                         ),
    .slot_7_axi_arready    (m_axi_arready                         ),
    <: if { $slot7_id > 0 } {  :>
    .slot_7_axi_rid        (m_axi_rid_int[<=: c_slot_7_axi_id_width :> -1 :0]),
     <: } :>
    .slot_7_axi_rdata      (m_axi_rdata_int[<=: c_slot_7_axi_data_width :> -1 :0]),
    .slot_7_axi_rresp      (m_axi_rresp                           ),
    .slot_7_axi_rvalid     (m_axi_rvalid                          ),
    .slot_7_axi_rready     (m_axi_rready                          ),
    <: } :>
    <: if { $c_num_of_mon_slots > 7 && $c_slot_7_axi_protocol == "AXI4S" } {  :>
    //slot_7 axi streaming Interface
    .slot_7_axis_aclk      (s_axi_aclk                      ),
    .slot_7_axis_aresetn   (s_axi_aresetn                         ),
    .slot_7_axis_tvalid    (m_axis_1_tvalid                       ),
    .slot_7_axis_tready    (m_axis_1_tready                       ),
    .slot_7_axis_tdata     (m_axis_1_tdata[<=: c_slot_7_axis_tdata_width :> -1 :0]),
    .slot_7_axis_tstrb     (m_axis_1_tstrb[<=: c_slot_7_axis_tdata_width :>/8 -1 :0]),
    .slot_7_axis_tkeep     (m_axis_1_tkeep[<=: c_slot_7_axis_tdata_width :>/8 -1 :0]),
    .slot_7_axis_tlast     (m_axis_1_tlast                         ),
    <: if { $slot7_tid > 0 } {  :>
    .slot_7_axis_tid       (m_axis_1_tid[<=: c_slot_7_axis_tid_width :> -1 :0]),
    <: } :>
    <: if { $slot7_tdest > 0 } {  :>
    .slot_7_axis_tdest     (m_axis_1_tdest[<=: c_slot_7_axis_tdest_width :> -1 :0]),
    <: } :>
    <: if { $slot7_tuser > 0 } {  :>
    .slot_7_axis_tuser     (m_axis_1_tuser[<=: c_slot_7_axis_tuser_width :> -1 :0]),
    <: } :>
    <: } :>
    <: if { $enable_ext_events == 1 } {  :>
     // external event 0
    .ext_clk_0             (s_axi_aclk         ),
    .ext_event_0_cnt_start (1'b0               ),
    .ext_event_0_cnt_stop  (1'b0               ),
    .ext_event_0           (1'b0               ),
    .ext_rstn_0            (s_axi_aresetn      ),
    <: } :>
    <: if { $c_num_of_mon_slots > 1 && $enable_ext_events == 1 } {  :>
     // external event 1
    .ext_clk_1             (s_axi_aclk        ),
    .ext_event_1_cnt_start (1'b0              ),
    .ext_event_1_cnt_stop  (1'b0              ),
    .ext_event_1           (1'b0              ),
    .ext_rstn_1            (s_axi_aresetn     ),
    <: } :>
    <: if { $c_num_of_mon_slots > 2 && $enable_ext_events == 1 } {  :>
     // external event 2
    .ext_clk_2             (s_axi_aclk         ),
    .ext_event_2_cnt_start (1'b0               ),
    .ext_event_2_cnt_stop  (1'b0               ),
    .ext_event_2           (1'b0               ),
    .ext_rstn_2            (s_axi_aresetn      ),
    <: } :>
    <: if { $c_num_of_mon_slots > 3 && $enable_ext_events == 1 } {  :>
     // external event 3
    .ext_clk_3             (s_axi_aclk         ),
    .ext_event_3_cnt_start (1'b0               ),
    .ext_event_3_cnt_stop  (1'b0               ),
    .ext_event_3           (1'b0               ),
    .ext_rstn_3            (s_axi_aresetn      ),
    <: } :>
    <: if { $c_num_of_mon_slots > 4 && $enable_ext_events == 1 } {  :>
     // external event 4
    .ext_clk_4             (s_axi_aclk        ),
    .ext_event_4_cnt_start (1'b0              ),
    .ext_event_4_cnt_stop  (1'b0              ),
    .ext_event_4           (1'b0              ),
    .ext_rstn_4            (s_axi_aresetn     ),
    <: } :>
    <: if { $c_num_of_mon_slots > 5 && $enable_ext_events == 1 } {  :>
     // external event 5
    .ext_clk_5             (s_axi_aclk         ),
    .ext_event_5_cnt_start (1'b0               ),
    .ext_event_5_cnt_stop  (1'b0               ),
    .ext_event_5           (1'b0               ),
    .ext_rstn_5            (s_axi_aresetn      ),
    <: } :>
    <: if { $c_num_of_mon_slots > 6 && $enable_ext_events == 1 } {  :>
     // external event 6
    .ext_clk_6             (s_axi_aclk         ),
    .ext_event_6_cnt_start (1'b0               ),
    .ext_event_6_cnt_stop  (1'b0               ),
    .ext_event_6           (1'b0               ),
    .ext_rstn_6            (s_axi_aresetn      ),
    <: } :>
    <: if { $c_num_of_mon_slots > 7 && $enable_ext_events == 1 } {  :>
     // external event 7
    .ext_clk_7             (s_axi_aclk         ),
    .ext_event_7_cnt_start (1'b0               ),
    .ext_event_7_cnt_stop  (1'b0               ),
    .ext_event_7           (1'b0               ),
    .ext_rstn_7            (s_axi_aresetn      ),
    <: } :>
    <: if { $c_enable_event_count == 1 || $c_enable_profile == 1 } {  :>
     // capture and reset Events for metric counters
    .capture_event         (1'b0               ),
    .reset_event           (1'b0               ),
    <: } :>
     // core clock and reset signals
    .core_aclk             (s_axi_aclk        ),
    .core_aresetn          (core_aresetn     ),
    <: if { ($c_enable_event_log == 1 || $c_enable_trace == 1) } {  :>
    // event Log streaming interface
    <: if { $c_log_data_offld == 0 } {  :>
    .m_axis_aclk                      (s_axi_aclk    ),
    .m_axis_aresetn                   (s_axi_aresetn ),
    .m_axis_tdata                     (m_axis_tdata),
    .m_axis_tvalid                    (m_axis_tvalid),
    .m_axis_tready                    (m_axis_tready),
    <: } else { :>
    .s_axi_offld_aclk   (s_axi_aclk),
    .s_axi_offld_aresetn(s_axi_aresetn),
    .s_axi_offld_araddr (s_axi_offld_araddr ),
    .s_axi_offld_arvalid(s_axi_offld_arvalid),
    .s_axi_offld_arlen  (s_axi_offld_arlen  ),
    <: if { ($s_axi_offld_id_width > 0) } {  :>
    .s_axi_offld_arid   (s_axi_offld_arid       ),
    .s_axi_offld_rid    (s_axi_offld_rid          ),
    <: } :>
    .s_axi_offld_arready(s_axi_offld_arready),
    .s_axi_offld_rready (s_axi_offld_rready ),
    .s_axi_offld_rdata  (s_axi_offld_rdata  ),
    .s_axi_offld_rresp  (s_axi_offld_rresp  ),
    .s_axi_offld_rvalid (s_axi_offld_rvalid ),
    .s_axi_offld_rlast  (s_axi_offld_rlast ),
    <: } :>
    <: } :>
    <: if { $enable_ext_triggers == 1 } {  :>
    // External Trigger Ports To Enable Metric Counters 
    .slot_0_ext_trig       (1'b0               ), 
    .slot_0_ext_trig_stop  (1'b0               ), 
    <: } :>
    <: if { $c_num_of_mon_slots > 1 && $enable_ext_triggers == 1 } {  :>
    .slot_1_ext_trig       (1'b0               ), 
    .slot_1_ext_trig_stop  (1'b0               ), 
    <: } :>
    <: if { $c_num_of_mon_slots > 2 && $enable_ext_triggers == 1 } {  :>
    .slot_2_ext_trig       (1'b0               ), 
    .slot_2_ext_trig_stop  (1'b0               ), 
    <: } :>
    <: if { $c_num_of_mon_slots > 3 && $enable_ext_triggers == 1 } {  :>
    .slot_3_ext_trig       (1'b0               ), 
    .slot_3_ext_trig_stop  (1'b0               ), 
    <: } :>
    <: if { $c_num_of_mon_slots > 4 && $enable_ext_triggers == 1 } {  :>
    .slot_4_ext_trig       (1'b0               ), 
    .slot_4_ext_trig_stop  (1'b0               ), 
    <: } :>
    <: if { $c_num_of_mon_slots > 5 && $enable_ext_triggers == 1 } {  :>
    .slot_5_ext_trig       (1'b0               ), 
    .slot_5_ext_trig_stop  (1'b0               ), 
    <: } :>
    <: if { $c_num_of_mon_slots > 6 && $enable_ext_triggers == 1 } {  :>
    .slot_6_ext_trig       (1'b0               ), 
    .slot_6_ext_trig_stop  (1'b0               ), 
    <: } :>
    <: if { $c_num_of_mon_slots > 7 && $enable_ext_triggers == 1 } {  :>
    .slot_7_ext_trig       (1'b0               ), 
    .slot_7_ext_trig_stop  (1'b0               ), 
    <: } :>
     // Interrupt to the processor
    .interrupt             (intr              )
       );

<: if { $c_enable_event_count == 1 || $c_enable_profile == 1 } { :>
   assign done = done_count;
   assign status = status_count[0] && ~status_count[1];
<: } else { :>
   assign done = log_pass;
   assign status = log_status[0] && ~log_status[1];
<: } :>




     // event Log streaming interface

endmodule
